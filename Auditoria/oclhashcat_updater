#!/bin/sh

# Script by www.seguridadwireless.net

SCRIPT_VERSION=20160717

############################################################
## Funciones comunes. Su nombre empieza por f_ ##
############################################################
f_variables(){
	. /opt/wifislax-updaters/Funciones/funciones_updater
}

############################################################
## Funciones propias del script. Su nombre empieza por F_ ##
############################################################
# Definicion de variables
F_variables() {
	# El suffix invertido para eliminar lo inverso que no necesitamos
	if [ $ARCH = x86_64 ]; then
	SUFFIX="32"
	LINK="64"
	else
	SUFFIX="64"
	LINK="32"
	fi
	PRGNAM=oclhashcat
	SRCNAM=hashcat
	echo -ne "\033]2;${PRGNAM}_updater\007"
	WEB=http://hashcat.net/oclhashcat/ #Este link no existe. Redirige a hashcat. No sé si oclhashcat == hashcat
	VERSION=`curl -s $WEB|grep .7z|head -1|cut -d "v" -f2|cut -d "<" -f 1|sed "s/ //g"`
	echo xddd
	echo $VERSION
	DRIVER_ATI=`curl -s $WEB|grep "AMD users"|grep -E "[0-9]+(\.|[0-9]+)*[0-9]+" -o | head -1`
	DRIVER_NVIDIA=`curl -s $WEB |grep "NVidia users"|grep -E "[0-9]+(\.|[0-9]+)*[0-9]+" -o | head -1`
	DESCARGA_NVIDIA=http://hashcat.net/files/cudaHashcat-$VERSION.7z
	DESCARGA_AMD=http://hashcat.net/files/oclHashcat-$VERSION.7z
}

# Creamos directorios extra
F_extradirs(){
mkdir -p $PKG/opt/$SRCNAM $PKG/usr/{bin,share/pixmaps,}
}

# Comprobar dependencias
F_dependencias(){
clear
echo $ROJO
echo "ATENCION:"$CYAN" esta aplicacion requiere para su correcto funcionamiento
          o el driver oficial ATI/AMD o el de NVIDIA , 
          segun sea el fabricante de tu grafica.
$ROJO      
          ¡¡¡   NO SOPORTA GRAFICAS INTEL   !!!"
echo $VERDE
echo "Driver NVIDIA requerido: NVIDIA-Linux-${DRIVER_NVIDIA}"
echo $ROJO
echo "Driver AMD/ATI requerido: linux-amd-catalyst-${DRIVER_ATI}"
echo $AMARILLO
echo "Pulse ENTER tras leer la informacion."
echo $CIERRE
read junk
}

# Si el paquete no existe se descargara de internet
F_download(){
if [ ! -f cudaHashcat-$VERSION.7z ]; then
	echo ""
	echo "$CYAN"Descargando sources de cudaHashcat-$VERSION"$CIERRE"
	sleep 1
	aria2c -x 3 $DESCARGA_NVIDIA
fi
if [ ! -f oclHashcat-$VERSION.7z ]; then
	echo ""
	echo "$CYAN"Descargando sources de oclHashcat-$VERSION"$CIERRE"
	sleep 1
	aria2c -x 3 $DESCARGA_AMD
fi
}

# Descomprimimos el fichero descargado y compilamos
F_compilar(){
echo ""
echo "$VERDE"Descomprimiendo cudaHashcat-$VERSION ..."$CIERRE"
sleep 1
7z -y x cudaHashcat-$VERSION.7z -o$PKG/opt/$SRCNAM
echo ""
echo "$VERDE"Copiando ficheros y eliminando innecesarios ..."$CIERRE"
rm -rf $PKG/opt/$SRCNAM/cudaHashcat-$VERSION/kernels/4318/*.$SUFFIX.cubin
rm -rf $PKG/opt/$SRCNAM/cudaHashcat-$VERSION/*.exe
rm -rf $PKG/opt/$SRCNAM/cudaHashcat-$VERSION/*.cmd
cp -rf $PKG/opt/$SRCNAM/cudaHashcat-$VERSION/* $PKG/opt/$SRCNAM
rm -rf $PKG/opt/$SRCNAM/cudaHashcat-$VERSION

echo ""
echo "$VERDE"Descomprimiendo oclHashcat-$VERSION ..."$CIERRE"
sleep 1
7z -y x oclHashcat-$VERSION.7z -o$PKG/opt/$SRCNAM
echo ""
echo "$VERDE"Copiando ficheros y eliminando innecesarios ..."$CIERRE"
rm -rf $PKG/opt/$SRCNAM/oclHashcat-$VERSION/*.exe
rm -rf $PKG/opt/$SRCNAM/oclHashcat-$VERSION/*.cmd
cp -rf $PKG/opt/$SRCNAM/oclHashcat-$VERSION/* $PKG/opt/$SRCNAM
rm -rf $PKG/opt/$SRCNAM/oclHashcat-$VERSION

# Relinkeamos los ejecutables para engañar a la gui
cd $PKG/opt/$SRCNAM
rm -rf $PKG/opt/$SRCNAM/*$SUFFIX.bin
ln -fs /opt/$SRCNAM/oclHashcat$LINK.bin $PKG/opt/$SRCNAM/oclHashcat-plus$LINK.bin
ln -fs /opt/$SRCNAM/cudaHashcat$LINK.bin $PKG/opt/$SRCNAM/cudaHashcat-plus$LINK.bin

# Añadimos el fichero eula.aceppted
echo "ZQAAAA==" | base64 -d > $PKG/opt/$SRCNAM/eula.accepted
}

###################################
## BLOQUE PRINCIPAL DE EJECUCION ##
###################################
# Si se cierra el script inesperadamente, ejecutar la funcion de limpieza
trap f_exitmode SIGHUP SIGINT

#Inicializamos las variables globales
f_variables
#Asignamos o detectamos arquitectura
f_arquitectura 
#Comprobamos conexion a Internet
f_comprobarConexion
#Inicializamos las variables del script
F_variables
#Creamos directorio de trabajo
f_directorioTemporal
# Creamos directorios extra
F_extradirs
#Mostramos el mensaje de presentacion
f_presentacion
#Comprobamos updates del script
f_comprobarUpdates
#Compronar dependencias
F_dependencias
#Comprobamos version instalada del paquete
f_versionInstalada
#Si no existe el fichero se descargara
F_download
#Descomprimir fichero descargado y compilamos
F_compilar
#Creamos xzm , instalamos y salimos
f_tareasFinales