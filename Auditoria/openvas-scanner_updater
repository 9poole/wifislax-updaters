#!/bin/sh

# Script by www.seguridadwireless.net

SCRIPT_VERSION=20151008

############################################################
## Funciones comunes. Su nombre empieza por f_ ##
############################################################
f_variables(){
	. /opt/wifislax-updaters/Funciones/funciones_updater
}

############################################################
## Funciones propias del script. Su nombre empieza por F_ ##
############################################################
# Definicion de variables
F_variables() {
	PRGNAM=openvas-scanner
	echo -ne "\033]2;${PRGNAM}_updater\007"
	WEB="http://wald.intevation.org"
	WEB_contenido=$(curl -sk $WEB/frs/?group_id=29 |grep "$PRGNAM")
	SOURCES=$(echo "$WEB_contenido" | grep -Po '">\K.*(?=</.>)' | grep "tar\.gz$" | sort -V | tail -1)
	VERSION=$(echo "$SOURCES" | rev | cut -d. -f3-|rev| sed "s/$PRGNAM//g" | cut -d- -f2)
	DOWNLOAD="${WEB}$(echo "$WEB_contenido"|grep "$SOURCES"|grep -Po 'href="\K.*(?=")' |grep "tar\.gz$")"
	EXTENSION=tar.gz
}

# Comprobar dependencias
F_dependencias(){
	echo 
	if [ -f /var/log/packages/openvas-libraries-* ]; then
	  EXIST=`echo "$VERDE"Instalada"$CIERRE"`
	  DESCARGAR=0
	else
	  EXIST=`echo "$ROJO"No Instalada"$CIERRE"`
	  DESCARGAR=1
	fi
	
	echo "$ROSA"Comprobando dependencias ..."$CIERRE"
	echo
	sleep 3
	echo "$CYAN"Dependencias de este paquete:""
	echo ""
	echo "$AMARILLO"openvas-libraries"$CIERRE: $EXIST"
	
	
	if [ $DESCARGAR = "1" ]; then
		echo ""
		echo ""$ROJO"No se cumplen los requisitos"$CIERRE"... "$VERDE"resolviendo"$CIERRE"..."
		sleep 3
		cd /opt/wifislax-updaters/Auditoria/
		statusfile=$(mktemp)
		xterm -e sh -c '/opt/wifislax-updaters/Auditoria/openvas-libraries_updater; echo $? > '$statusfile 
		status=$(cat $statusfile)
		rm $statusfile
		if [ -z $status ] || [ $status != "0" ]; then
		  echo "$ROJO"ERROR. No se ha podido crear el paquete"$CIERRE"
		  if [ -z $status ]; then
		    exit 1
		  else
		    exit $status
		  fi
		fi
		
		cd $TMP
	fi

	echo ""
	echo "$VERDE"Bien ..podemos continuar"$CIERRE"
	echo ""
	sleep 3
}

# Descomprimimos el fichero descargado y compilamos
F_compilar(){

mkdir -p build
cd build
  cmake \
    -DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DLOCALSTATEDIR=/var \
    -DSYSCONFDIR=/etc \
    -DCMAKE_BUILD_TYPE=Release ..
  make  || exit 1
  make install DESTDIR=$PKG
cd ..

mkdir -p $PKG/etc/rc.d

echo "#!/bin/sh
#
# /etc/rc.d/rc.openvassd
#
# Start/stop/restart/reload the OpenVAS Scanner Daemon.
#
# To make OpenVAS Scanner start automatically at boot, make this
# file executable:  chmod 755 /etc/rc.d/rc.openvassd
# and add to rc.local:
# if [ -x /etc/rc.d/rc.openvassd ]; then
#   . /etc/rc.d/rc.openvassd start
# fi
#

OPENVASSD_PATH=/usr/sbin
OPENVASSD_BIN=openvassd
OPENVASSD_OPTIONS=\"-a 127.0.0.1 --gnutls-priorities=SECURE128:-VERS-SSL3.0\"
OPENVASSD_CMD=\"\$OPENVASSD_PATH/\$OPENVASSD_BIN \$OPENVASSD_OPTIONS\"

openvassd_start() {
  echo Starting OpenVAS Scanner: \$OPENVASSD_CMD
  \$OPENVASSD_CMD
}

openvassd_stop() {
  echo \"Stopping OpenVAS Scanner\"
  /bin/killall \$OPENVASSD_BIN
}

openvassd_restart() {
  openvassd_stop
  sleep 2
  openvassd_start
}

openvassd_reload() {
  /bin/killall -HUP \$OPENVASSD_BIN
}

case \"\$1\" in
'start')
  openvassd_start
  ;;
'stop')
  openvassd_stop
  ;;
'restart')
  openvassd_restart
  ;;
'reload')
  openvassd_reload
  ;;
*)
  echo \"usage \$0 start|stop|restart|reload\"
esac
" > $PKG/etc/rc.d/rc.openvassd

chmod 0644 $PKG/etc/rc.d/rc.openvassd

}

###################################
## BLOQUE PRINCIPAL DE EJECUCION ##
###################################
# Si se cierra el script inesperadamente, ejecutar la funcion de limpieza
trap f_exitmode SIGHUP SIGINT

#Inicializamos las variables globales
f_variables
#Comprobamos conexion a Internet
f_comprobarConexion
#Inicializamos las variables del script
F_variables
#Creamos directorio de trabajo
f_directorioTemporal
#Mostramos el mensaje de presentacion
f_presentacion
#Comprobamos updates del script
f_comprobarUpdates
#Compronar dependencias
F_dependencias
#Asignamos o detectamos arquitectura
f_arquitectura
#Comprobamos version instalada del paquete
f_versionInstalada
#Si no existe el fichero se descargara
f_download
#Preparamos entorno
f_preparar
#Descomprimir fichero descargado y compilamos
F_compilar
#Hacemos strip sobre el paquete
f_strip
#Creamos xzm , instalamos y salimos
f_tareasFinales
