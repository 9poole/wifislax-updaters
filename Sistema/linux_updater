#!/bin/bash

# Script by USUARIONUEVO @ www.seguridadwireless.net

# Eliminamos posibles ficheros viejos de modificaciones de scripts	
rm -rf /opt/wifislax-updaters/*/*~ &>/dev/null

SCRIPT_VERSION=20160214

# 20160214  Incluidos parametros para informar de tiempo empleado
# 20160212  Arreglos multiarch se suprime soporte aufs3
# 20160117  Limpieza de codigo
# 20151024  Cambiado parametro arch a i586
# 20150815  Ajustes para adaptarse a github
# 20150723  Limpiezas en codigo
# 20150704  Corregido bug en DOWNLOAD , se ponia 3.x en vez de la variable FAMILIA
# 20150630  Se cambian variables PAE por SMP que es mas correcto.
# 20150426  Se a√±ade parametro para identificar fammilia de kernel 3.x , 4.x etc etc
# 20141027  Se crea funcion que dejara un nucleo libre al sistema si hay mas de 2 cores
# 20141023  Se incluye funcion para detectar posible bug en aufs
# 20141020  Si en 3 segundos no responde el ftp con la version de script, se continua.
# 20141009  Se ajustan algunos parametros como la creacion del patch aufs que ya no busca por nombre sino *.patch
# 20140827  Se incluye el kernel logo  dentro del script y peque√±as mejoras en la identificacion de rama
# 20140801  Si el sistema esta en modo live el script lo detecta y se cierra
# 20140727  Corregido bug al crear variable TAG y mejorada la creacion del patch wireless
#           Se comprueba la existencia del directorio de trabajo /usr/src si no existe se crea
# 20140723  Ya nos e busca el fichero config se genera en base al sistema anfitrion (feat d1kov)
#           A√±adida variable para estilo de configuracion de kernel , si es wifislax xconf si no menuconfig
#           A√±adido en las partes mas criticas un || exit 1 , en caso de error el script se detendra justo hay
# 20140722  Correido bug al instalar en disco duro linea 386 antes dir2xzm y es un xzm2dir
#           corregido un bug gramatical y 2 en variables no definidas (TAG Y BUILD)
# 20140721  version inicial

# Colores
CIERRE=${CIERRE:-"[0m"}
ROJO=${ROJO:-"[1;31m"}
VERDE=${VERDE:-"[1;32m"}
CYAN=${CYAN:-"[1;36m"}
AMARILLO=${AMARILLO:-"[1;33m"}
BLANCO=${BLANCO:-"[1;37m"}
ROSA=${ROSA:-"[1;35m"}

# Nombre del script
# El PRGNAM2 se usa en la creacion del xzm ,NO BORRAR
PRGNAM2=kernel
PRGNAM=linux
SCRIPTNAME=linux_updater
TAG=sw
echo -ne "\033]2;${PRGNAM}_updater\007"

# Bienvenida
clear
echo $ROSA
echo "
      __ __                 __  _____                _ __       
     / // /__ _______  ___ / / / ___/__  __ _  ___  (_) /__ ____
    / ,< / -_) __/ _ \/ -_) / / /__/ _ \/  ' \/ _ \/ / / -_) __/
   /_/|_|\__/_/ /_//_/\__/_/  \___/\___/_/_/_/ .__/_/_/\__/_/   
                                            /_/                  "
echo ""                                         
echo ""$AMARILLO"   ##### By USUARIONUEVO @ www.seguridadwireless.net #####"$CIERRE""
echo ""
sleep 3

# Si el sistema esta en modo live se avisa y se sale del script
if [ -d /mnt/live/memory ]; then
echo ""
echo ""$ROJO"Se ha detectado que el sistema esta en modo LIVE "$BLANCO"..."$CIERRE""
sleep 3
echo ""
echo ""$ROJO"Este script solo funcion en sistemas instalados al HDD "$BLANCO"..."$CIERRE""
sleep 3
echo ""$ROJO"Lo siento , el script se cierra aqui"$BLANCO"... "$ROJO"usalo desde HDD"$CIERRE""
sleep 3
exit 0
fi

# Sin internet el script no continua al no poder saber version online ni descargarla
# Comprobar conexion by geminis_demon @ www.seguridadwireless.net
# Se hace un ping a google si no hay respuesta se determina que no hay internet y se sale.
# Si hay respuesta al ping el script continuara.
if [ ! "$(ping google.com -c1 2>/dev/null)" ]; then
echo "$ROJO"No tengo internet"$CIERRE ... $BLANCO"el script se cerrara..."$CIERRE"
echo ""
sleep 3
exit 0
fi

# Comprobar updates para el script
SERVIDOR_WEB="https://raw.githubusercontent.com/wifislax-ng/wifislax-updaters/master"
DIRECTORIO=$(find /opt/wifislax-updaters -type f -name ${SCRIPTNAME} | rev | cut -d/ -f2- | rev | head -1)
SERVIDOR_VERSION=$(timeout -s SIGTERM 3 curl -s $SERVIDOR_WEB/${DIRECTORIO##*/}/${SCRIPTNAME} | grep "SCRIPT_VERSION=" | head -1 |cut -d "=" -f2)


echo ${CYAN}Version Script$CIERRE: $ROJO${SCRIPT_VERSION:6}$BLANCO/$AMARILLO${SCRIPT_VERSION:4:2}$BLANCO/$ROJO${SCRIPT_VERSION:0:4}$CIERRE

if [ "$(ping github.com -c1 2>/dev/null)" ]; then
if [[ $SCRIPT_VERSION -lt $SERVIDOR_VERSION ]]; then
echo
echo "$ROSA"Comprobando si hay actualizaciones para el script..."$CIERRE."
echo ${ROJO}NUEVA VERSION$CIERRE
echo 
echo ${ROSA}Version Server$CIERRE: $ROJO${SERVIDOR_VERSION:6}$BLANCO/$AMARILLO${SERVIDOR_VERSION:4:2}$BLANCO/$ROJO${SERVIDOR_VERSION:0:4}$CIERRE
echo
echo ${CYAN}Actualizando ${SCRIPTNAME}
curl -s $SERVIDOR_WEB/${DIRECTORIO##*/}/${SCRIPTNAME} -o $DIRECTORIO/${SCRIPTNAME}
echo ${ROJO}LISTO$CIERRE
sleep 3
$0
exit
fi
fi

# Variables
# Definimos arquitectura del sitema anfitrion
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

if [ $ARCH = "i586" ]; then
HEADERS=i386
IMAGEN=x86
elif [ "$ARCH" = "x86_x64" ]; then
HEADERS=x86_x64
IMAGEN=x86_x64
elif [ "$ARCH" = "arm" ]; then
HEADERS=arm
IMAGEN=arm
fi

# Aseguramos la existencia del directorio de compilacion y si no existe se crea
if [ ! -d /usr/src ]; then
mkdir -p /usr/src
fi

# Cantidad de nucleos del sistema usables para make -j
NUCLEOS=$(grep -c \^processor /proc/cpuinfo)

# variable que restara un nucleo para reservarlo al sistema si hay mas de 2
if [ $NUCLEOS -gt 2 ]; then
let NUCLEOS=$NUCLEOS-1
fi

# Numero de modulo xzm
M0DNUM=000

# Nombre de modulo xzm
MODNAM=Kernel

# Numero de build
BUILD=1

# Numero de Kernel completo instalado en el sistema
KERNEL_SISTEMA=`uname -r | cut -d '-' -f1 | sed 's/ //g'`

# Rama de kernel eliminando del numero de kernel la parte final por ejemplo 3.12.4 se cortaria a 3.12
RAMA=`uname -r | cut -d '-' -f1 | cut -d "." -f-2 | sed 's/ //g'`

# Pagina web de kernel org donde se buscara actualizacion sobre la misma rama de nuestro kernel
WEB=https://www.kernel.org/

# Grepeando numero kernel mas nuevo para nuestra rama en kernel.org
KERNEL_ONLINE=`curl -s $WEB | grep linux-$RAMA.* | head -1 |cut -d 'x' -f 4 | cut -d '-' -f 2 | cut -d " " -f 2 | cut -d "t" -f1 | sed 's/.$//g'`

# Web completa para descargar el source code
DESCARGA=https://www.kernel.org/pub/linux/kernel/v4.x/linux-$KERNEL_ONLINE.tar.xz

# Comparamos version sistema con version online si son iguales se sale del script
if [[ $KERNEL_SISTEMA = $KERNEL_ONLINE ]]; then
echo ""$VERDE"No hay updates para la rama de kernel "$AMARILLO"$RAMA"$CIERRE""
sleep 3
echo ""$AMARILLO"Si quieres recompilar el mismo kernel pulsa "$ROJO"ENTER"$CIERRE""
echo ""
echo ""$AMARILLO"Si no quieres recompilar simplemente cierra la ventana"$CIERRE""
read junk
rm -Rf /usr/src/$PRGNAM-$KERNEL_ONLINE &>/dev/null
fi

# Se comprueba si el archivo a descargar ya existe por pruebas anteriores y evitar descargar de nuevo
# Entramos a la ruta de trabajo
cd /usr/src/

# Si el paquete no existe se descargara de internet
if [ ! -f linux-$KERNEL_ONLINE.tar.xz ]; then
echo ""
echo "$CYAN"Descargando sources de $PRGNAM-$KERNEL_ONLINE "$CIERRE"
sleep 3

# Bajamos el kernel
aria2c -x 3 $DESCARGA
fi

# Descomprimir en /usr/src
# Si existen restos de una prueba anterior seeliminaran
rm -rf /usr/src/$PRGNAM-$KERNEL_ONLINE &>/dev/null

# Descomprimir fichero
echo ""
echo "$VERDE"Descomprimiendo ..."$CIERRE"
sleep 3
tar xvf $PRGNAM-$KERNEL_ONLINE.tar.xz

# Entrar a la ruta del kernel descomprimido
cd $PRGNAM-$KERNEL_ONLINE
# Se limpia por si los de kernel.org se dejaron algun fichero que no es de kernel
make mrproper

###################################
### Generamos parche wireless  ####
###################################
cat > Negative-channel-multi.patch << "EOF"
--- a/net/wireless/chan.c	2013-08-29 18:47:51.000000000 +0200
+++ b/net/wireless/chan.c	2013-08-31 22:20:45.014734447 +0200
@@ -441,4 +441,2 @@
 		return -EOPNOTSUPP;
-	if (!cfg80211_has_monitors_only(rdev))
-		return -EBUSY;

--- a/net/mac80211/cfg.c	Tue May 28 16:57:23 2013 -0400
+++ b/net/mac80211/cfg.c	Tue May 28 17:16:15 2013 -0400
@@ -801,3 +801,4 @@
 		}
-	} else if (local->open_count == local->monitors) {
+	// Patch: Always allow channel change, even if a normal virtual interface is present
+	} else /*if (local->open_count == local->monitors)*/ {
 		local->_oper_channel = chandef->chan;


--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -3588,9 +3589,9 @@ static int ieee80211_cfg_get_channel
 	if (chanctx_conf) {
 		*chandef = chanctx_conf->def;
 		ret = 0;
-	} else if (local->open_count > 0 &&
+	} else /*if (local->open_count > 0 &&
 		   local->open_count == local->monitors &&
-		   sdata->vif.type == NL80211_IFTYPE_MONITOR) {
+		   sdata->vif.type == NL80211_IFTYPE_MONITOR)*/ {
 		if (local->use_chanctx)
 			*chandef = local->monitor_chandef;
 		else

EOF

# Aplicamos parche si hay error se parara el proceso ( exit 1 )
echo ""
echo ""$VERDE"Aplicando parche wireless para channel -1 "$BLANCO"..."$CIERRE""
sleep 3
patch -f -p1 < Negative-channel-multi.patch || exit 1

# Parte1 avisamos por si quieres poner un config
if [ ! -f /usr/src/$PRGNAM-$KERNEL_ONLINE/.config ]; then
echo ""
echo ""$CYAN"No se detecto fichero config ..."$CIERRE""
sleep 2
echo ""
echo ""$CYAN"Si quieres a√±adir uno hazlo en /usr/src/$PRGNAM-$KERNEL_ONLINE/.config ..."$CIERRE""
sleep 2
echo ""$CYAN"Si no a√±ades un config se usara directamente la config del kernel actual."$CIERRE""
sleep 2
echo ""
echo ""$CYAN"Cuando pulses "$AMARILLO"ENTER "$CYAN"el proceso continuara"$CIERRE""
echo ""
read junk
fi

# Parte2 sino hay config generamos una en base al kernel actual
if [ -f /usr/src/$PRGNAM-$KERNEL_ONLINE/.config ]; then
echo ""
echo ""$CYAN"Usando config a√±adida por el usuario ..."$CIERRE""
echo ""
else
echo ""
echo ""$CYAN"Generamos fichero .config ..."$CIERRE""
echo ""
modprobe configs && zcat /proc/config.gz > /usr/src/$PRGNAM-$KERNEL_ONLINE/.config
sleep 2
fi

# Descargamos version de aufs correspondiente a nuestra rama y aplicamos
# Indicamos version aufs igual a rama de kernel
# Ruta donde se enviara patch de aufs que es a las sources del kernel
if [ $RAMA = 4.1 ]; then
RAMA=4.1.13+
fi
DEST=/usr/src/$PRGNAM-$KERNEL_ONLINE/aufs$RAMA.patch

# Creamos parche y aplicamos
echo ""
echo ""$VERDE"Creamos y aplicamos el parche aufs "$BLANCO"..."$CIERRE""
rm -r /tmp/aufs* 2>/dev/null
mkdir /tmp/aufs$$
cd /tmp/aufs$$
git clone https://github.com/sfjro/aufs4-standalone.git || exit 1
cd aufs4-standalone
git checkout origin/aufs$RAMA || exit 1
mkdir ../a ../b
cp -r {Documentation,fs,include} ../b
rm ../b/include/uapi/linux/Kbuild 2>/dev/null || rm ../b/include/linux/Kbuild
cd ..
diff -rupN a/ b/ > $DEST
cat aufs4-standalone/*.patch >> $DEST
rm -r /tmp/aufs$$



# Verificamos la existencia del parche aufs
if [ ! -f /usr/src/$PRGNAM-$KERNEL_ONLINE/aufs$RAMA.patch ]; then
echo ""
echo ""$ROJO"La creacion del parche aufs a fallado ...saliendo..."
echo ""
sleep 3
exit 0
fi

# Aplicamos parche aufs
cd /usr/src/$PRGNAM-$KERNEL_ONLINE

# Parcheamos
patch -f -p1 -i aufs$RAMA.patch || exit 1

# Compilamos el kernel
make oldconfig || exit 1
make xconfig || exit 1

# Variables para calcular tiempo de inicio
COMIENZO=$(date +%s)

# Comienza la compilacion del kernel
make  || exit 1

# Compilados los modulos del kernel
make modules  || exit 1

# Variable que se consultara despues de configurar kernel
# Comprobar si es un kernel SMP (pae)
if [ -z "`grep -i 'CONFIG_HIGHMEM64G=y' .config`" ]; then
SMP=""
else
SMP="SMP-"
fi

# Creamos la tuta de destina a instalar el kernel
mkdir -p $HOME/Desktop/$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG
make modules_install INSTALL_MOD_PATH=$HOME/Desktop/$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG || exit 1

# Instalamos las cabeceras kernel-headers
make headers_install ARCH=$HEADERS INSTALL_HDR_PATH=$HOME/Desktop/$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG/usr || exit 1
rm -r $HOME/Desktop/$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG/usr/include/*/.install
rm -r $HOME/Desktop/$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG/usr/include/*/..install.cmd

# Copiamos vmlinuz a escritorio
if [ -z "`grep -i 'CONFIG_HIGHMEM64G=y' .config`" ]; then
VMLINUZ="vmlinuz"
else
VMLINUZ="vmlinuz2"
fi
cp /usr/src/$PRGNAM-$KERNEL_ONLINE/arch/$IMAGEN/boot/bzImage $HOME/Desktop/$VMLINUZ &>/dev/null

# Generamos kernel sources recortadas
mv System.map ../
make clean
mv ../System.map .
make prepare
make scripts
rm -Rf Documentation drivers fs net sound firmware
ls -1d arch/* | grep -v $IMAGEN | xargs rm -Rf
ls -1d include/* | grep asm- | grep -v $IMAGEN | grep -v generic | xargs rm -Rf
cp include/generated/* include/linux &>/dev/null


# Preparamos creacion de xzm
mkdir -p $HOME/Desktop/$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG/usr/src
cp -r /usr/src/$PRGNAM-$KERNEL_ONLINE $HOME/Desktop/$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG/usr/src

# Realizamos limpieza
rm $HOME/Desktop/$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG/usr/src/$PRGNAM-$KERNEL_ONLINE/kernel.txt &>/dev/null
rm $HOME/Desktop/$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG/usr/src/$PRGNAM-$KERNEL_ONLINE/Negative-channel-multi.patch &>/dev/null
rm $HOME/Desktop/$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG/usr/src/$PRGNAM-$KERNEL_ONLINE/aufs$RAMA.patch &>/dev/null
rm aufs$RAMA.patch &>/dev/null
rm $HOME/Desktop/$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG/usr/src/$PRGNAM-$KERNEL_ONLINE/.config.old &>/dev/null

# Esta regla eliminara la carpeta firmwares del kernel si el sistema es wifislax
# Por que usa una script que baja todos los firmwares desde el git
rm -Rf $HOME/Desktop/$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG/lib/firmware

# Creamos xzm de kernel + sources
dir2xzm $HOME/Desktop/$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG $HOME/Desktop/$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG.xzm
mv $HOME/Desktop/$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG.xzm $HOME/Desktop/$M0DNUM-$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG.xzm

# Limpiamos
rm -Rf $HOME/Desktop/$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG

# Si no salio en las dos opciones anteriores es un wifislax en hdd se da opcion de instalar el kernel en sistema
# Variables para calcular tiempo de acabado
AHORA=$(($(date +%s)-3600));
TIEMPO="$(date --date=@$(($AHORA-$COMIENZO)) +%X)"
echo ""
echo "${AMARILLO}Tiempo empleado${BLANCO}: $TIEMPO"
echo ""
echo ""$AMARILLO"Pulsa ENTER si quieres instalar el kernel,si no te interesa cierra el scipt."$CIERRE""
read junk
echo ""
echo ""$VERDE"Instalando Kernel $KERNEL_ONLINE en sistema ..."$CIERRE""
if [ $SMP = "SMP-" ]; then
VMLINUZCONFIG="smp"
else
VMLINUZCONFIG=""
fi
cp -r $HOME/Desktop/$VMLINUZ /boot/vmlinuz-$KERNEL_ONLINE-$VMLINUZCONFIG-wifislax
xzm2dir $HOME/Desktop/$M0DNUM-$SMP$MODNAM-$KERNEL_ONLINE-$ARCH-$BUILD$TAG.xzm /
update-grub
echo ""
echo ""$CYAN"Instalacion completada ..."$CIERRE""
echo ""
echo ""$AMARILLO"Bye Bye"$CIERRE""