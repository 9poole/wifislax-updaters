#!/bin/sh

# Script by www.seguridadwireless.net

SCRIPT_VERSION=20160526

############################################################
## Funciones comunes. Su nombre empieza por f_ ##
############################################################
f_variables(){
	. /opt/wifislax-updaters/Funciones/funciones_updater
}

############################################################
## Funciones propias del script. Su nombre empieza por F_ ##
############################################################
# Definicion de variables
F_variables() {
	PRGNAM=mlt
	echo -ne "\033]2;${PRGNAM}_updater\007"
	WEB=http://downloads.sourceforge.net/project/$PRGNAM/$PRGNAM/
	VERSION=6.0.0
	EXTENSION=tar.gz
	SOURCES=$PRGNAM-$VERSION.$EXTENSION
	DOWNLOAD=$WEB/$SOURCES
}

# Comprobar dependencias
F_dependencias(){
DEPENDENCIAS="ffmpeg libdv libquicktime"
f_dependencias
}

# Descomprimimos el fichero descargado y compilamos
F_compilar(){
echo 
echo "$VERDE"Configurando ..."$CIERRE"
sleep 1


# Autodetect which SWIG Languages bindings to build
# according to what's installed on the system:
if [ -f "$(which javac)" ]; then java="java"; else java=""; fi
if [ -f "$(which lua)" ]; then lua="lua"; else lua=""; fi
if [ -f "$(which perl)" ]; then perl="perl"; else perl=""; fi
if [ -f "$(which php)" ]; then php="php"; else php=""; fi
if [ -f "$(which python)" ]; then python="python"; else python=""; fi
if [ -h "$(which tclsh)" ]; then tcl="tcl"; else tcl=""; fi
if [ -f "$(which csharp)" ]; then csharp="csharp"; else csharp=""; fi
# missing mlt.h in mlt-6.0.0/src/swig/ruby; broken src
ruby="" #if [ -f "$(which ruby)" ]; then ruby="ruby"; else ruby=""; fi

if pkg-config --exists vdpau ; then vdpau="--avformat-vdpau" ; else vdpau="" ; fi

CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --disable-debug \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --qimage-libdir=${QT4DIR}/qt/lib \
  --qimage-includedir=${QT4DIR}/qt/include \
  --enable-gpl \
  --luma-compress \
  --enable-motion-est \
  $vdpau \
  --swig-languages="$java $lua $perl $php $python $ruby $tcl $csharp" \
  --build=$ARCH-slackware-linux

echo 
echo "$VERDE"Compilando ..."$CIERRE"
sleep 1

make clean
CFLAGS="$SLKCFLAGS" CXXFLAGS="$SLKCFLAGS" make
make install DESTDIR=$PKG

# Install built bindings
if [ "$lua" ]; then
  ( cd $TMP/$PRGNAM-$VERSION/src/swig/lua
    install -D -m 0755 mlt.so $PKG/$(pkg-config --variable INSTALL_CMOD lua)/mlt.so
    install -D -m 0644 play.lua $PKG/usr/doc/$PRGNAM-$VERSION/play.lua
  )
fi
if [ "$perl" ]; then
  ( cd $TMP/$PRGNAM-$VERSION/src/swig/perl
    install -D -m 0644 mlt.pm $PKG/usr/share/perl5/mlt.pm
    install -D -m 0755 play.pl $PKG/usr/share/perl5/play.pl
    install -D -m 0755 blib/arch/auto/mlt/mlt.so \
      $PKG/usr/lib$LIBDIRSUFFIX/perl5/auto/mlt/mlt.so
    install -D -m 0644 mlt.bs \
      $PKG/usr/lib$LIBDIRSUFFIX/perl5/auto/mlt/mlt.bs
  )
fi
if [ "$php" ]; then
  ( cd $TMP/$PRGNAM-$VERSION/src/swig/php
    install -D -m 0755 mlt.so $PKG/usr/lib$LIBDIRSUFFIX/php/extensions/mlt.so
    install -D -m 0644 play.php $PKG/usr/doc/$PRGNAM-$VERSION/play.php
  )
fi
if [ "$python" ]; then
  PYTHONSITEPKG=$(python -c "import sys, os; print os.path.join('/usr/lib${LIBDIRSUFFIX}', 'python%s' % sys.version[:3], 'site-packages')")
  ( cd $TMP/$PRGNAM-$VERSION/src/swig/python
    install -D -m 0755 _mlt.so $PKG/$PYTHONSITEPKG/_mlt.so
    install -D -m 0755 mlt.py $PKG/$PYTHONSITEPKG/mlt.py
    install -D -m 0755 play.py $PKG/usr/doc/$PRGNAM-$VERSION/play.py
  )
fi
if [ "$ruby" ]; then
  ( cd $TMP/$PRGNAM-$VERSION/src/swig/ruby
    install -D -m 0755 mlt.so \
      $PKG$(ruby -e 'print RbConfig::CONFIG["sitearchdir"]')/mlt.so
    install -D -m 0755 play.rb $PKG/usr/doc/$PRGNAM-$VERSION/play.rb
    install -D -m 0755 thumbs.rb $PKG/usr/doc/$PRGNAM-$VERSION/thumbs.rb
  )
fi
if [ "$tcl" ]; then
  ( cd $TMP/$PRGNAM-$VERSION/src/swig/tcl
    . /usr/lib$LIBDIRSUFFIX/tclConfig.sh
    install -D -m 0755 mlt.so \
      $PKG/usr/lib$LIBDIRSUFFIX/tcl$TCL_MAJOR_VERSION/$TCL_VERSION/mlt.so
    install -D -m 0755 play.tcl $PKG/usr/doc/$PRGNAM-$VERSION/play.tcl
  )
fi
}

###################################
## BLOQUE PRINCIPAL DE EJECUCION ##
###################################
# Si se cierra el script inesperadamente, ejecutar la funcion de limpieza
trap f_exitmode SIGHUP SIGINT

#Inicializamos las variables globales
f_variables
#Comprobamos conexion a Internet
f_comprobarConexion
#Inicializamos las variables del script
F_variables
#Creamos directorio de trabajo
f_directorioTemporal
#Mostramos el mensaje de presentacion
f_presentacion
#Comprobamos updates del script
f_comprobarUpdates
#Asignamos o detectamos arquitectura
f_arquitectura
#Comprobamos version instalada del paquete
f_versionInstalada
#Compronar dependencias
F_dependencias
#Si no existe el fichero se descargara
f_download
#Preparamos entorno
f_preparar
#Descomprimir fichero descargado y compilamos
F_compilar
#Hacemos strip sobre el paquete
f_strip
#Creamos xzm , instalamos y salimos
f_tareasFinales