#!/bin/sh

# Script by www.seguridadwireless.net

SCRIPT_VERSION=20160831

############################################################
## Funciones comunes. Su nombre empieza por f_ ##
############################################################
f_variables(){
	. /opt/wifislax-updaters/Funciones/funciones_updater
}

############################################################
## Funciones propias del script. Su nombre empieza por F_ ##
############################################################
# Definicion de variables
F_variables() {
	PRGNAM=youtube-dl
	echo -ne "\033]2;${PRGNAM}_updater\007"
	WEB=https://github.com/rg3/youtube-dl
	VERSION=`curl -s $WEB/releases|grep tar.gz|head -1|cut -d- -f4|cut -d t -f-1|sed 's/.$//g'`
	EXTENSION=tar.gz
	SOURCES=$VERSION.$EXTENSION
	DOWNLOAD=$WEB/archive/$SOURCES
}

# Descomprimimos el fichero descargado y compilamos
F_compilar(){
#########################
### Generamos parche ####
#########################
cat > setup.patch << "EOF"
--- youtube-dl-2016.05.30.2/Makefile.orig	2016-05-30 16:14:38.003087066 +0300
+++ youtube-dl-2016.05.30.2/Makefile	2016-05-30 16:19:03.597103047 +0300
@@ -5,11 +5,11 @@
 	find . -name "*.pyc" -delete
 	find . -name "*.class" -delete
 
-PREFIX ?= /usr/local
+PREFIX ?= /usr
 BINDIR ?= $(PREFIX)/bin
 MANDIR ?= $(PREFIX)/man
 SHAREDIR ?= $(PREFIX)/share
-PYTHON ?= /usr/bin/env python
+PYTHON ?= /usr/bin/python
 
 # set SYSCONFDIR to /etc if PREFIX=/usr or PREFIX=/usr/local
 SYSCONFDIR != if [ $(PREFIX) = /usr -o $(PREFIX) = /usr/local ]; then echo /etc; else echo $(PREFIX)/etc; fi
@@ -43,7 +43,7 @@
 
 .PHONY: all clean install test tar bash-completion pypi-files zsh-completion fish-completion ot offlinetest codetest supportedsites
 
-pypi-files: youtube-dl.bash-completion README.txt youtube-dl.1 youtube-dl.fish
+pypi-files: youtube-dl.bash-completion README.md youtube-dl.1 youtube-dl.fish
 
 youtube-dl: youtube_dl/*.py youtube_dl/*/*.py
 	zip --quiet youtube-dl youtube_dl/*.py youtube_dl/*/*.py
@@ -66,11 +66,11 @@
 	$(PYTHON) devscripts/make_supportedsites.py docs/supportedsites.md
 
 README.txt: README.md
-	pandoc -f markdown -t plain README.md -o README.txt
+	# pandoc -f markdown -t plain README.md -o README.txt
 
 youtube-dl.1: README.md
 	$(PYTHON) devscripts/prepare_manpage.py youtube-dl.1.temp.md
-	pandoc -s -f markdown -t man youtube-dl.1.temp.md -o youtube-dl.1
+	# pandoc -s -f markdown -t man youtube-dl.1.temp.md -o youtube-dl.1
 	rm -f youtube-dl.1.temp.md
 
 youtube-dl.bash-completion: youtube_dl/*.py youtube_dl/*/*.py devscripts/bash-completion.in
--- youtube-dl-2016.05.30.2/setup.orig	2016-05-30 16:14:52.766087954 +0300
+++ youtube-dl-2016.05.30.2/setup.py	2016-05-30 16:22:55.100116977 +0300
@@ -47,10 +47,10 @@
     params = py2exe_params
 else:
     files_spec = [
-        ('etc/bash_completion.d', ['youtube-dl.bash-completion']),
-        ('etc/fish/completions', ['youtube-dl.fish']),
-        ('share/doc/youtube_dl', ['README.txt']),
-        ('share/man/man1', ['youtube-dl.1'])
+        ('/etc/bash_completion.d', ['youtube-dl.bash-completion']),
+        ('/etc/fish/completions', ['youtube-dl.fish']),
+        ('/usr/doc/youtube_dl', ['README.txt']),
+        ('/usr/man/man1', ['youtube-dl.1'])
     ]
     root = os.path.dirname(os.path.abspath(__file__))
     data_files = []

EOF

echo 
echo "$VERDE"Aplicando patch ..."$CIERRE"
sleep 1
patch -p1 < setup.patch || exit 1

echo 
echo "$VERDE"Compilando ..."$CIERRE"
sleep 1

make  || exit 1
python setup.py install --root=$PKG

chmod 0755 $PKG/etc/bash_completion.d/${PRGNAM}.bash-completion
chmod 0755 $PKG/etc/fish/completions/${PRGNAM}.fish

}

###################################
## BLOQUE PRINCIPAL DE EJECUCION ##
###################################
# Si se cierra el script inesperadamente, ejecutar la funcion de limpieza
trap f_exitmode SIGHUP SIGINT

#Inicializamos las variables globales
f_variables
#Comprobamos conexion a Internet
f_comprobarConexion
#Inicializamos las variables del script
F_variables
#Creamos directorio de trabajo
f_directorioTemporal
#Mostramos el mensaje de presentacion
f_presentacion
#Comprobamos updates del script
f_comprobarUpdates
#Asignamos o detectamos arquitectura
f_arquitectura
#Comprobamos version instalada del paquete
f_versionInstalada
#Si no existe el fichero se descargara
f_download
#Preparar entorno
f_preparar
#Descomprimir fichero descargado y compilamos
F_compilar
#Hacemos strip sobre el paquete
f_strip
#Creamos xzm , instalamos y salimos
f_tareasFinales