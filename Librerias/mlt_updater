#!/bin/sh

# Script by www.seguridadwireless.net

SCRIPT_VERSION=20160219

############################################################
## Funciones comunes. Su nombre empieza por f_ ##
############################################################
f_variables(){
	. /opt/wifislax-updaters/Funciones/funciones_updater
}

############################################################
## Funciones propias del script. Su nombre empieza por F_ ##
############################################################
# Definicion de variables
F_variables() {
	PRGNAM=mlt
	echo -ne "\033]2;${PRGNAM}_updater\007"
	WEB=http://downloads.sourceforge.net/project/$PRGNAM/$PRGNAM/
	VERSION=0.9.8
	EXTENSION=tar.gz
	SOURCES=$PRGNAM-$VERSION.$EXTENSION
	DOWNLOAD=$WEB/$SOURCES
}

# Comprobar dependencias
F_dependencias(){
DEPENDENCIAS="ffmpeg libdv libquicktime"
f_dependencias
}

# Descomprimimos el fichero descargado y compilamos
F_compilar(){
echo 
echo "$VERDE"Configurando ..."$CIERRE"
sleep 1

FFMPEGSERIES=$(ffmpeg -version|grep version|head -1|cut -d ' ' -f3|cut -d. -f1)
if [ $FFMPEGSERIES = "3" ]; then
echo "
RnJvbSA5N2MyZGQwZGU0ZjU3OGFkNDBkNTQ3ZWRkZjc4ZmNiMWU0YTAwOGE0IE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBEYW4gRGVubmVkeSA8ZGFuQGRlbm5lZHkub3JnPgpEYXRlOiBT
YXQsIDUgU2VwIDIwMTUgMTM6MDY6MjEgLTA3MDAKU3ViamVjdDogW1BBVENIXSBGaXggYXZmb3Jt
YXQgYnVpbGQgYWdhaW5zdCBGRm1wZWcgYW5kIExpYmF2IG1hc3Rlci4KClRoaXMgZHJvcHMgc3Vw
cG9ydCBmb3IgRkZtcGVnIHYxLjA7IHJlcXVpcmVzIGF0IGxlYXN0IHYxLjEuIFN0aWxsIHdvcmtz
CndpdGggTGliYXYgdjkuCkNQVSBmbGFncyBhcmUgbm8gbG9uZ2VyIHJlcXVpcmVkL3VzZWQgYnkg
bGlic3dzY2FsZS4gVGhleSBhcmUgZGV0ZWN0ZWQKYXQgcnVudGltZSBhdXRvbWF0aWNhbGx5Lgot
LS0KIHNyYy9tb2R1bGVzL2F2Zm9ybWF0L2NvbnN1bWVyX2F2Zm9ybWF0LmMgICAgIHwgMjggKysr
LS0tLS0KIHNyYy9tb2R1bGVzL2F2Zm9ybWF0L2ZpbHRlcl9hdmNvbG91cl9zcGFjZS5jIHwgMjAg
KystLS0tCiBzcmMvbW9kdWxlcy9hdmZvcm1hdC9maWx0ZXJfYXZkZWludGVybGFjZS5jICB8IDIy
ICsrKy0tLS0KIHNyYy9tb2R1bGVzL2F2Zm9ybWF0L2ZpbHRlcl9zd3NjYWxlLmMgICAgICAgIHwg
MTggKystLS0tCiBzcmMvbW9kdWxlcy9hdmZvcm1hdC9wcm9kdWNlcl9hdmZvcm1hdC5jICAgICB8
IDk1ICsrKysrKysrKysrKystLS0tLS0tLS0tLS0tLS0KIHNyYy9tb2R1bGVzL2F2Zm9ybWF0L3Zk
cGF1LmMgICAgICAgICAgICAgICAgIHwgIDYgKy0KIDYgZmlsZXMgY2hhbmdlZCwgODEgaW5zZXJ0
aW9ucygrKSwgMTA4IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL3NyYy9tb2R1bGVzL2F2Zm9y
bWF0L2NvbnN1bWVyX2F2Zm9ybWF0LmMgYi9zcmMvbW9kdWxlcy9hdmZvcm1hdC9jb25zdW1lcl9h
dmZvcm1hdC5jCmluZGV4IGVmOGIxNTMuLjc5NDdjNDcgMTAwNjQ0Ci0tLSBhL3NyYy9tb2R1bGVz
L2F2Zm9ybWF0L2NvbnN1bWVyX2F2Zm9ybWF0LmMKKysrIGIvc3JjL21vZHVsZXMvYXZmb3JtYXQv
Y29uc3VtZXJfYXZmb3JtYXQuYwpAQCAtNDM5LDE4ICs0MzksMTggQEAgc3RhdGljIHZvaWQgYXBw
bHlfcHJvcGVydGllcyggdm9pZCAqb2JqLCBtbHRfcHJvcGVydGllcyBwcm9wZXJ0aWVzLCBpbnQg
ZmxhZ3MgKQogCX0KIH0KIAotc3RhdGljIGVudW0gUGl4ZWxGb3JtYXQgcGlja19waXhfZm10KCBt
bHRfaW1hZ2VfZm9ybWF0IGltZ19mbXQgKQorc3RhdGljIGVudW0gQVZQaXhlbEZvcm1hdCBwaWNr
X3BpeF9mbXQoIG1sdF9pbWFnZV9mb3JtYXQgaW1nX2ZtdCApCiB7CiAJc3dpdGNoICggaW1nX2Zt
dCApCiAJewogCWNhc2UgbWx0X2ltYWdlX3JnYjI0OgotCQlyZXR1cm4gUElYX0ZNVF9SR0IyNDsK
KwkJcmV0dXJuIEFWX1BJWF9GTVRfUkdCMjQ7CiAJY2FzZSBtbHRfaW1hZ2VfcmdiMjRhOgotCQly
ZXR1cm4gUElYX0ZNVF9SR0JBOworCQlyZXR1cm4gQVZfUElYX0ZNVF9SR0JBOwogCWNhc2UgbWx0
X2ltYWdlX3l1djQyMHA6Ci0JCXJldHVybiBQSVhfRk1UX1lVVjQyMFA7CisJCXJldHVybiBBVl9Q
SVhfRk1UX1lVVjQyMFA7CiAJZGVmYXVsdDoKLQkJcmV0dXJuIFBJWF9GTVRfWVVZVjQyMjsKKwkJ
cmV0dXJuIEFWX1BJWF9GTVRfWVVZVjQyMjsKIAl9CiB9CiAKQEAgLTc5OCw3ICs3OTgsNyBAQCBz
dGF0aWMgQVZTdHJlYW0gKmFkZF92aWRlb19zdHJlYW0oIG1sdF9jb25zdW1lciBjb25zdW1lciwg
QVZGb3JtYXRDb250ZXh0ICpvYywgQQogCQlzdC0+dGltZV9iYXNlID0gYy0+dGltZV9iYXNlOwog
CiAJCS8vIERlZmF1bHQgdG8gdGhlIGNvZGVjJ3MgZmlyc3QgcGl4X2ZtdCBpZiBwb3NzaWJsZS4K
LQkJYy0+cGl4X2ZtdCA9IHBpeF9mbXQ/IGF2X2dldF9waXhfZm10KCBwaXhfZm10ICkgOiBjb2Rl
Yz8gY29kZWMtPnBpeF9mbXRzWzBdIDogUElYX0ZNVF9ZVVY0MjBQOworCQljLT5waXhfZm10ID0g
cGl4X2ZtdD8gYXZfZ2V0X3BpeF9mbXQoIHBpeF9mbXQgKSA6IGNvZGVjPyBjb2RlYy0+cGl4X2Zt
dHNbMF0gOiBBVl9QSVhfRk1UX1lVVjQyMFA7CiAJCQogCQlzd2l0Y2ggKCBjb2xvcnNwYWNlICkK
IAkJewpAQCAtMTAzMiw3ICsxMDMyLDcgQEAgc3RhdGljIGludCBvcGVuX3ZpZGVvKCBtbHRfcHJv
cGVydGllcyBwcm9wZXJ0aWVzLCBBVkZvcm1hdENvbnRleHQgKm9jLCBBVlN0cmVhbQogCiAJaWYo
IGNvZGVjICYmIGNvZGVjLT5waXhfZm10cyApCiAJewotCQljb25zdCBlbnVtIFBpeGVsRm9ybWF0
ICpwID0gY29kZWMtPnBpeF9mbXRzOworCQljb25zdCBlbnVtIEFWUGl4ZWxGb3JtYXQgKnAgPSBj
b2RlYy0+cGl4X2ZtdHM7CiAJCWZvciggOyAqcCE9LTE7IHArKyApCiAJCXsKIAkJCWlmKCAqcCA9
PSB2aWRlb19lbmMtPnBpeF9mbXQgKQpAQCAtMTc5MSwxMiArMTc5MSw2IEBAIHN0YXRpYyB2b2lk
ICpjb25zdW1lcl90aHJlYWQoIHZvaWQgKmFyZyApCiAKIAkJCQkJCS8vIERvIHRoZSBjb2xvdXIg
c3BhY2UgY29udmVyc2lvbgogCQkJCQkJaW50IGZsYWdzID0gU1dTX0JJQ1VCSUM7Ci0jaWZkZWYg
VVNFX01NWAotCQkJCQkJZmxhZ3MgfD0gU1dTX0NQVV9DQVBTX01NWDsKLSNlbmRpZgotI2lmZGVm
IFVTRV9TU0UKLQkJCQkJCWZsYWdzIHw9IFNXU19DUFVfQ0FQU19NTVgyOwotI2VuZGlmCiAJCQkJ
CQlzdHJ1Y3QgU3dzQ29udGV4dCAqY29udGV4dCA9IHN3c19nZXRDb250ZXh0KCB3aWR0aCwgaGVp
Z2h0LCBwaWNrX3BpeF9mbXQoIGltZ19mbXQgKSwKIAkJCQkJCQl3aWR0aCwgaGVpZ2h0LCBjLT5w
aXhfZm10LCBmbGFncywgTlVMTCwgTlVMTCwgTlVMTCk7CiAJCQkJCQlzd3Nfc2NhbGUoIGNvbnRl
eHQsIChjb25zdCB1aW50OF90KiBjb25zdCopIHZpZGVvX2F2ZnJhbWUtPmRhdGEsIHZpZGVvX2F2
ZnJhbWUtPmxpbmVzaXplLCAwLCBoZWlnaHQsCkBAIC0xODA4LDkgKzE4MDIsOSBAQCBzdGF0aWMg
dm9pZCAqY29uc3VtZXJfdGhyZWFkKCB2b2lkICphcmcgKQogCQkJCQkJLy8gQXBwbHkgdGhlIGFs
cGhhIGlmIGFwcGxpY2FibGUKIAkJCQkJCWlmICggIW1sdF9wcm9wZXJ0aWVzX2dldCggcHJvcGVy
dGllcywgIm1sdF9pbWFnZV9mb3JtYXQiICkgfHwKIAkJCQkJCSAgICAgc3RyY21wKCBtbHRfcHJv
cGVydGllc19nZXQoIHByb3BlcnRpZXMsICJtbHRfaW1hZ2VfZm9ybWF0IiApLCAicmdiMjRhIiAp
ICkKLQkJCQkJCWlmICggYy0+cGl4X2ZtdCA9PSBQSVhfRk1UX1JHQkEgfHwKLQkJCQkJCSAgICAg
Yy0+cGl4X2ZtdCA9PSBQSVhfRk1UX0FSR0IgfHwKLQkJCQkJCSAgICAgYy0+cGl4X2ZtdCA9PSBQ
SVhfRk1UX0JHUkEgKQorCQkJCQkJaWYgKCBjLT5waXhfZm10ID09IEFWX1BJWF9GTVRfUkdCQSB8
fAorCQkJCQkJICAgICBjLT5waXhfZm10ID09IEFWX1BJWF9GTVRfQVJHQiB8fAorCQkJCQkJICAg
ICBjLT5waXhfZm10ID09IEFWX1BJWF9GTVRfQkdSQSApCiAJCQkJCQl7CiAJCQkJCQkJdWludDhf
dCAqYWxwaGEgPSBtbHRfZnJhbWVfZ2V0X2FscGhhX21hc2soIGZyYW1lICk7CiAJCQkJCQkJcmVn
aXN0ZXIgaW50IG47CkBAIC0xODQ0LDggKzE4MzgsNiBAQCBzdGF0aWMgdm9pZCAqY29uc3VtZXJf
dGhyZWFkKCB2b2lkICphcmcgKQogCQkJCQkJYXZfaW5pdF9wYWNrZXQoJnBrdCk7CiAKIAkJCQkJ
CS8vIFNldCBmcmFtZSBpbnRlcmxhY2UgaGludHMKLQkJCQkJCWMtPmNvZGVkX2ZyYW1lLT5pbnRl
cmxhY2VkX2ZyYW1lID0gIW1sdF9wcm9wZXJ0aWVzX2dldF9pbnQoIGZyYW1lX3Byb3BlcnRpZXMs
ICJwcm9ncmVzc2l2ZSIgKTsKLQkJCQkJCWMtPmNvZGVkX2ZyYW1lLT50b3BfZmllbGRfZmlyc3Qg
PSBtbHRfcHJvcGVydGllc19nZXRfaW50KCBmcmFtZV9wcm9wZXJ0aWVzLCAidG9wX2ZpZWxkX2Zp
cnN0IiApOwogCQkJCQkJaWYgKCBtbHRfcHJvcGVydGllc19nZXRfaW50KCBmcmFtZV9wcm9wZXJ0
aWVzLCAicHJvZ3Jlc3NpdmUiICkgKQogCQkJCQkJCWMtPmZpZWxkX29yZGVyID0gQVZfRklFTERf
UFJPR1JFU1NJVkU7CiAJCQkJCQllbHNlCmRpZmYgLS1naXQgYS9zcmMvbW9kdWxlcy9hdmZvcm1h
dC9maWx0ZXJfYXZjb2xvdXJfc3BhY2UuYyBiL3NyYy9tb2R1bGVzL2F2Zm9ybWF0L2ZpbHRlcl9h
dmNvbG91cl9zcGFjZS5jCmluZGV4IGY3MGZkMDguLjkxMGRlMGMgMTAwNjQ0Ci0tLSBhL3NyYy9t
b2R1bGVzL2F2Zm9ybWF0L2ZpbHRlcl9hdmNvbG91cl9zcGFjZS5jCisrKyBiL3NyYy9tb2R1bGVz
L2F2Zm9ybWF0L2ZpbHRlcl9hdmNvbG91cl9zcGFjZS5jCkBAIC00NywxNyArNDcsMTcgQEAgc3Rh
dGljIGludCBjb252ZXJ0X21sdF90b19hdl9jcyggbWx0X2ltYWdlX2Zvcm1hdCBmb3JtYXQgKQog
CXN3aXRjaCggZm9ybWF0ICkKIAl7CiAJCWNhc2UgbWx0X2ltYWdlX3JnYjI0OgotCQkJdmFsdWUg
PSBQSVhfRk1UX1JHQjI0OworCQkJdmFsdWUgPSBBVl9QSVhfRk1UX1JHQjI0OwogCQkJYnJlYWs7
CiAJCWNhc2UgbWx0X2ltYWdlX3JnYjI0YToKIAkJY2FzZSBtbHRfaW1hZ2Vfb3BlbmdsOgotCQkJ
dmFsdWUgPSBQSVhfRk1UX1JHQkE7CisJCQl2YWx1ZSA9IEFWX1BJWF9GTVRfUkdCQTsKIAkJCWJy
ZWFrOwogCQljYXNlIG1sdF9pbWFnZV95dXY0MjI6Ci0JCQl2YWx1ZSA9IFBJWF9GTVRfWVVZVjQy
MjsKKwkJCXZhbHVlID0gQVZfUElYX0ZNVF9ZVVlWNDIyOwogCQkJYnJlYWs7CiAJCWNhc2UgbWx0
X2ltYWdlX3l1djQyMHA6Ci0JCQl2YWx1ZSA9IFBJWF9GTVRfWVVWNDIwUDsKKwkJCXZhbHVlID0g
QVZfUElYX0ZNVF9ZVVY0MjBQOwogCQkJYnJlYWs7CiAJCWRlZmF1bHQ6CiAJCQltbHRfbG9nX2Vy
cm9yKCBOVUxMLCAiW2ZpbHRlciBhdmNvbG9yX3NwYWNlXSBJbnZhbGlkIGZvcm1hdCAlc1xuIiwK
QEAgLTEyMywxNiArMTIzLDEwIEBAIHN0YXRpYyBpbnQgYXZfY29udmVydF9pbWFnZSggdWludDhf
dCAqb3V0LCB1aW50OF90ICppbiwgaW50IG91dF9mbXQsIGludCBpbl9mbXQsCiAJaW50IGZsYWdz
ID0gU1dTX0JJQ1VCSUMgfCBTV1NfQUNDVVJBVEVfUk5EOwogCWludCBlcnJvciA9IC0xOwogCi0J
aWYgKCBvdXRfZm10ID09IFBJWF9GTVRfWVVZVjQyMiApCisJaWYgKCBvdXRfZm10ID09IEFWX1BJ
WF9GTVRfWVVZVjQyMiApCiAJCWZsYWdzIHw9IFNXU19GVUxMX0NIUl9IX0lOUDsKIAllbHNlCiAJ
CWZsYWdzIHw9IFNXU19GVUxMX0NIUl9IX0lOVDsKLSNpZmRlZiBVU0VfTU1YCi0JZmxhZ3MgfD0g
U1dTX0NQVV9DQVBTX01NWDsKLSNlbmRpZgotI2lmZGVmIFVTRV9TU0UKLQlmbGFncyB8PSBTV1Nf
Q1BVX0NBUFNfTU1YMjsKLSNlbmRpZgogCiAJYXZwaWN0dXJlX2ZpbGwoICZpbnB1dCwgaW4sIGlu
X2ZtdCwgd2lkdGgsIGhlaWdodCApOwogCWF2cGljdHVyZV9maWxsKCAmb3V0cHV0LCBvdXQsIG91
dF9mbXQsIHdpZHRoLCBoZWlnaHQgKTsKQEAgLTE0MSw3ICsxMzUsNyBAQCBzdGF0aWMgaW50IGF2
X2NvbnZlcnRfaW1hZ2UoIHVpbnQ4X3QgKm91dCwgdWludDhfdCAqaW4sIGludCBvdXRfZm10LCBp
bnQgaW5fZm10LAogCWlmICggY29udGV4dCApCiAJewogCQkvLyBsaWJzd3NjYWxlIHdhbnRzIHRo
ZSBSR0IgY29sb3JzcGFjZSB0byBiZSBTV1NfQ1NfREVGQVVMVCwgd2hpY2ggaXMgPSBTV1NfQ1Nf
SVRVNjAxLgotCQlpZiAoIG91dF9mbXQgPT0gUElYX0ZNVF9SR0IyNCB8fCBvdXRfZm10ID09IFBJ
WF9GTVRfUkdCQSApCisJCWlmICggb3V0X2ZtdCA9PSBBVl9QSVhfRk1UX1JHQjI0IHx8IG91dF9m
bXQgPT0gQVZfUElYX0ZNVF9SR0JBICkKIAkJCWRzdF9jb2xvcnNwYWNlID0gNjAxOwogCQllcnJv
ciA9IHNldF9sdW1hX3RyYW5zZmVyKCBjb250ZXh0LCBzcmNfY29sb3JzcGFjZSwgZHN0X2NvbG9y
c3BhY2UsIHVzZV9mdWxsX3JhbmdlICk7CiAJCXN3c19zY2FsZSggY29udGV4dCwgKGNvbnN0IHVp
bnQ4X3QqIGNvbnN0KikgaW5wdXQuZGF0YSwgaW5wdXQubGluZXNpemUsIDAsIGhlaWdodCwKQEAg
LTMyNiw3ICszMjAsNyBAQCBtbHRfZmlsdGVyIGZpbHRlcl9hdmNvbG91cl9zcGFjZV9pbml0KCB2
b2lkICphcmcgKQogCQlpbnQgKndpZHRoID0gKGludCopIGFyZzsKIAkJaWYgKCAqd2lkdGggPiAw
ICkKIAkJewotCQkJc3RydWN0IFN3c0NvbnRleHQgKmNvbnRleHQgPSBzd3NfZ2V0Q29udGV4dCgg
KndpZHRoLCAqd2lkdGgsIFBJWF9GTVRfUkdCMzIsIDY0LCA2NCwgUElYX0ZNVF9SR0IzMiwgU1dT
X0JJTElORUFSLCBOVUxMLCBOVUxMLCBOVUxMKTsKKwkJCXN0cnVjdCBTd3NDb250ZXh0ICpjb250
ZXh0ID0gc3dzX2dldENvbnRleHQoICp3aWR0aCwgKndpZHRoLCBBVl9QSVhfRk1UX1JHQjMyLCA2
NCwgNjQsIEFWX1BJWF9GTVRfUkdCMzIsIFNXU19CSUxJTkVBUiwgTlVMTCwgTlVMTCwgTlVMTCk7
CiAJCQlpZiAoIGNvbnRleHQgKQogCQkJCXN3c19mcmVlQ29udGV4dCggY29udGV4dCApOwogCQkJ
ZWxzZQpkaWZmIC0tZ2l0IGEvc3JjL21vZHVsZXMvYXZmb3JtYXQvZmlsdGVyX2F2ZGVpbnRlcmxh
Y2UuYyBiL3NyYy9tb2R1bGVzL2F2Zm9ybWF0L2ZpbHRlcl9hdmRlaW50ZXJsYWNlLmMKaW5kZXgg
OWMwMTg5ZS4uOTFjNDM1YyAxMDA2NDQKLS0tIGEvc3JjL21vZHVsZXMvYXZmb3JtYXQvZmlsdGVy
X2F2ZGVpbnRlcmxhY2UuYworKysgYi9zcmMvbW9kdWxlcy9hdmZvcm1hdC9maWx0ZXJfYXZkZWlu
dGVybGFjZS5jCkBAIC0yMzQsMjggKzIzNCwyOCBAQCBzdGF0aWMgaW50IG1sdF9hdnBpY3R1cmVf
ZGVpbnRlcmxhY2UoQVZQaWN0dXJlICpkc3QsIGNvbnN0IEFWUGljdHVyZSAqc3JjLAogewogICAg
IGludCBpOwogCi0gICAgaWYgKHBpeF9mbXQgIT0gUElYX0ZNVF9ZVVY0MjBQICYmCi0gICAgICAg
IHBpeF9mbXQgIT0gUElYX0ZNVF9ZVVY0MjJQICYmCi0gICAgICAgIHBpeF9mbXQgIT0gUElYX0ZN
VF9ZVVlWNDIyICYmCi0gICAgICAgIHBpeF9mbXQgIT0gUElYX0ZNVF9ZVVY0NDRQICYmCi0JcGl4
X2ZtdCAhPSBQSVhfRk1UX1lVVjQxMVApCisgICAgaWYgKHBpeF9mbXQgIT0gQVZfUElYX0ZNVF9Z
VVY0MjBQICYmCisgICAgICAgIHBpeF9mbXQgIT0gQVZfUElYX0ZNVF9ZVVY0MjJQICYmCisgICAg
ICAgIHBpeF9mbXQgIT0gQVZfUElYX0ZNVF9ZVVlWNDIyICYmCisgICAgICAgIHBpeF9mbXQgIT0g
QVZfUElYX0ZNVF9ZVVY0NDRQICYmCisJcGl4X2ZtdCAhPSBBVl9QSVhfRk1UX1lVVjQxMVApCiAg
ICAgICAgIHJldHVybiAtMTsKICAgICBpZiAoKHdpZHRoICYgMykgIT0gMCB8fCAoaGVpZ2h0ICYg
MykgIT0gMCkKICAgICAgICAgcmV0dXJuIC0xOwogCi0JaWYgKCBwaXhfZm10ICE9IFBJWF9GTVRf
WVVZVjQyMiApCisJaWYgKCBwaXhfZm10ICE9IEFWX1BJWF9GTVRfWVVZVjQyMiApCiAJewogICAg
ICAgZm9yKGk9MDtpPDM7aSsrKSB7CiAgICAgICAgICAgaWYgKGkgPT0gMSkgewogICAgICAgICAg
ICAgICBzd2l0Y2gocGl4X2ZtdCkgewotICAgICAgICAgICAgICBjYXNlIFBJWF9GTVRfWVVWNDIw
UDoKKyAgICAgICAgICAgICAgY2FzZSBBVl9QSVhfRk1UX1lVVjQyMFA6CiAgICAgICAgICAgICAg
ICAgICB3aWR0aCA+Pj0gMTsKICAgICAgICAgICAgICAgICAgIGhlaWdodCA+Pj0gMTsKICAgICAg
ICAgICAgICAgICAgIGJyZWFrOwotICAgICAgICAgICAgICBjYXNlIFBJWF9GTVRfWVVWNDIyUDoK
KyAgICAgICAgICAgICAgY2FzZSBBVl9QSVhfRk1UX1lVVjQyMlA6CiAgICAgICAgICAgICAgICAg
ICB3aWR0aCA+Pj0gMTsKICAgICAgICAgICAgICAgICAgIGJyZWFrOwotICAgICAgICAgICAgICBj
YXNlIFBJWF9GTVRfWVVWNDExUDoKKyAgICAgICAgICAgICAgY2FzZSBBVl9QSVhfRk1UX1lVVjQx
MVA6CiAgICAgICAgICAgICAgICAgICB3aWR0aCA+Pj0gMjsKICAgICAgICAgICAgICAgICAgIGJy
ZWFrOwogICAgICAgICAgICAgICBkZWZhdWx0OgpAQCAtMzEyLDggKzMxMiw4IEBAIHN0YXRpYyBp
bnQgZmlsdGVyX2dldF9pbWFnZSggbWx0X2ZyYW1lIGZyYW1lLCB1aW50OF90ICoqaW1hZ2UsIG1s
dF9pbWFnZV9mb3JtYXQKIAkJQVZQaWN0dXJlICpvdXRwdXQgPSBtbHRfcG9vbF9hbGxvYyggc2l6
ZW9mKCBBVlBpY3R1cmUgKSApOwogCiAJCS8vIEZpbGwgdGhlIHBpY3R1cmUKLQkJYXZwaWN0dXJl
X2ZpbGwoIG91dHB1dCwgKmltYWdlLCBQSVhfRk1UX1lVWVY0MjIsICp3aWR0aCwgKmhlaWdodCAp
OwotCQltbHRfYXZwaWN0dXJlX2RlaW50ZXJsYWNlKCBvdXRwdXQsIG91dHB1dCwgUElYX0ZNVF9Z
VVlWNDIyLCAqd2lkdGgsICpoZWlnaHQgKTsKKwkJYXZwaWN0dXJlX2ZpbGwoIG91dHB1dCwgKmlt
YWdlLCBBVl9QSVhfRk1UX1lVWVY0MjIsICp3aWR0aCwgKmhlaWdodCApOworCQltbHRfYXZwaWN0
dXJlX2RlaW50ZXJsYWNlKCBvdXRwdXQsIG91dHB1dCwgQVZfUElYX0ZNVF9ZVVlWNDIyLCAqd2lk
dGgsICpoZWlnaHQgKTsKIAogCQkvLyBGcmVlIHRoZSBwaWN0dXJlCiAJCW1sdF9wb29sX3JlbGVh
c2UoIG91dHB1dCApOwpkaWZmIC0tZ2l0IGEvc3JjL21vZHVsZXMvYXZmb3JtYXQvZmlsdGVyX3N3
c2NhbGUuYyBiL3NyYy9tb2R1bGVzL2F2Zm9ybWF0L2ZpbHRlcl9zd3NjYWxlLmMKaW5kZXggYjgy
MTNhMy4uMzdjMTU2ZCAxMDA2NDQKLS0tIGEvc3JjL21vZHVsZXMvYXZmb3JtYXQvZmlsdGVyX3N3
c2NhbGUuYworKysgYi9zcmMvbW9kdWxlcy9hdmZvcm1hdC9maWx0ZXJfc3dzY2FsZS5jCkBAIC0z
NywxNyArMzcsMTcgQEAgc3RhdGljIGlubGluZSBpbnQgY29udmVydF9tbHRfdG9fYXZfY3MoIG1s
dF9pbWFnZV9mb3JtYXQgZm9ybWF0ICkKIAlzd2l0Y2goIGZvcm1hdCApCiAJewogCQljYXNlIG1s
dF9pbWFnZV9yZ2IyNDoKLQkJCXZhbHVlID0gUElYX0ZNVF9SR0IyNDsKKwkJCXZhbHVlID0gQVZf
UElYX0ZNVF9SR0IyNDsKIAkJCWJyZWFrOwogCQljYXNlIG1sdF9pbWFnZV9yZ2IyNGE6CiAJCWNh
c2UgbWx0X2ltYWdlX29wZW5nbDoKLQkJCXZhbHVlID0gUElYX0ZNVF9SR0JBOworCQkJdmFsdWUg
PSBBVl9QSVhfRk1UX1JHQkE7CiAJCQlicmVhazsKIAkJY2FzZSBtbHRfaW1hZ2VfeXV2NDIyOgot
CQkJdmFsdWUgPSBQSVhfRk1UX1lVWVY0MjI7CisJCQl2YWx1ZSA9IEFWX1BJWF9GTVRfWVVZVjQy
MjsKIAkJCWJyZWFrOwogCQljYXNlIG1sdF9pbWFnZV95dXY0MjBwOgotCQkJdmFsdWUgPSBQSVhf
Rk1UX1lVVjQyMFA7CisJCQl2YWx1ZSA9IEFWX1BJWF9GTVRfWVVWNDIwUDsKIAkJCWJyZWFrOwog
CQlkZWZhdWx0OgogCQkJZnByaW50Ziggc3RkZXJyLCAiSW52YWxpZCBmb3JtYXQuLi5cbiIgKTsK
QEAgLTEwOCwxMiArMTA4LDYgQEAgc3RhdGljIGludCBmaWx0ZXJfc2NhbGUoIG1sdF9mcmFtZSBm
cmFtZSwgdWludDhfdCAqKmltYWdlLCBtbHRfaW1hZ2VfZm9ybWF0ICpmb3IKIAkJCS8vIFhYWDog
d2Ugb25seSBrbm93IGhvdyB0byByZXNjYWxlIHBhY2tlZCBmb3JtYXRzCiAJCQlyZXR1cm4gMTsK
IAl9Ci0jaWZkZWYgVVNFX01NWAotCWludGVycCB8PSBTV1NfQ1BVX0NBUFNfTU1YOwotI2VuZGlm
Ci0jaWZkZWYgVVNFX1NTRQotCWludGVycCB8PSBTV1NfQ1BVX0NBUFNfTU1YMjsKLSNlbmRpZgog
CiAJLy8gQ29udmVydCB0aGUgcGl4ZWwgZm9ybWF0cwogCWludCBhdmZvcm1hdCA9IGNvbnZlcnRf
bWx0X3RvX2F2X2NzKCAqZm9ybWF0ICk7CkBAIC0xNDgsNyArMTQyLDcgQEAgc3RhdGljIGludCBm
aWx0ZXJfc2NhbGUoIG1sdF9mcmFtZSBmcmFtZSwgdWludDhfdCAqKmltYWdlLCBtbHRfaW1hZ2Vf
Zm9ybWF0ICpmb3IKIAkJCXVpbnQ4X3QgKmFscGhhID0gbWx0X2ZyYW1lX2dldF9hbHBoYSggZnJh
bWUgKTsKIAkJCWlmICggYWxwaGEgKQogCQkJewotCQkJCWF2Zm9ybWF0ID0gUElYX0ZNVF9HUkFZ
ODsKKwkJCQlhdmZvcm1hdCA9IEFWX1BJWF9GTVRfR1JBWTg7CiAJCQkJc3RydWN0IFN3c0NvbnRl
eHQgKmNvbnRleHQgPSBzd3NfZ2V0Q29udGV4dCggaXdpZHRoLCBpaGVpZ2h0LCBhdmZvcm1hdCwg
b3dpZHRoLCBvaGVpZ2h0LCBhdmZvcm1hdCwgaW50ZXJwLCBOVUxMLCBOVUxMLCBOVUxMKTsKIAkJ
CQlhdnBpY3R1cmVfZmlsbCggJmlucHV0LCBhbHBoYSwgYXZmb3JtYXQsIGl3aWR0aCwgaWhlaWdo
dCApOwogCQkJCW91dGJ1ZiA9IG1sdF9wb29sX2FsbG9jKCBvd2lkdGggKiBvaGVpZ2h0ICk7CkBA
IC0xODIsNyArMTc2LDcgQEAgbWx0X2ZpbHRlciBmaWx0ZXJfc3dzY2FsZV9pbml0KCBtbHRfcHJv
ZmlsZSBwcm9maWxlLCB2b2lkICphcmcgKQogCQlpbnQgKndpZHRoID0gKGludCopIGFyZzsKIAkJ
aWYgKCAqd2lkdGggPiAwICkKIAkJewotCQkJc3RydWN0IFN3c0NvbnRleHQgKmNvbnRleHQgPSBz
d3NfZ2V0Q29udGV4dCggKndpZHRoLCAqd2lkdGgsIFBJWF9GTVRfUkdCMzIsIDY0LCA2NCwgUElY
X0ZNVF9SR0IzMiwgU1dTX0JJTElORUFSLCBOVUxMLCBOVUxMLCBOVUxMKTsKKwkJCXN0cnVjdCBT
d3NDb250ZXh0ICpjb250ZXh0ID0gc3dzX2dldENvbnRleHQoICp3aWR0aCwgKndpZHRoLCBBVl9Q
SVhfRk1UX1JHQjMyLCA2NCwgNjQsIEFWX1BJWF9GTVRfUkdCMzIsIFNXU19CSUxJTkVBUiwgTlVM
TCwgTlVMTCwgTlVMTCk7CiAJCQlpZiAoIGNvbnRleHQgKQogCQkJCXN3c19mcmVlQ29udGV4dCgg
Y29udGV4dCApOwogCQkJZWxzZQpkaWZmIC0tZ2l0IGEvc3JjL21vZHVsZXMvYXZmb3JtYXQvcHJv
ZHVjZXJfYXZmb3JtYXQuYyBiL3NyYy9tb2R1bGVzL2F2Zm9ybWF0L3Byb2R1Y2VyX2F2Zm9ybWF0
LmMKaW5kZXggMzQ5NWUyYS4uNTVlMzI2ZCAxMDA2NDQKLS0tIGEvc3JjL21vZHVsZXMvYXZmb3Jt
YXQvcHJvZHVjZXJfYXZmb3JtYXQuYworKysgYi9zcmMvbW9kdWxlcy9hdmZvcm1hdC9wcm9kdWNl
cl9hdmZvcm1hdC5jCkBAIC0zMyw2ICszMyw3IEBACiAjaW5jbHVkZSA8bGliYXZ1dGlsL3BpeGRl
c2MuaD4KICNpbmNsdWRlIDxsaWJhdnV0aWwvZGljdC5oPgogI2luY2x1ZGUgPGxpYmF2dXRpbC9v
cHQuaD4KKyNpbmNsdWRlIDxsaWJhdnV0aWwvY2hhbm5lbF9sYXlvdXQuaD4KIAogI2lmZGVmIFZE
UEFVCiAjICBpbmNsdWRlIDxsaWJhdmNvZGVjL3ZkcGF1Lmg+CkBAIC01MDQsMjEgKzUwNSwyMSBA
QCBzdGF0aWMgY2hhciogcGFyc2VfdXJsKCBtbHRfcHJvZmlsZSBwcm9maWxlLCBjb25zdCBjaGFy
KiBVUkwsIEFWSW5wdXRGb3JtYXQgKipmbwogCXJldHVybiByZXN1bHQ7CiB9CiAKLXN0YXRpYyBl
bnVtIFBpeGVsRm9ybWF0IHBpY2tfcGl4X2ZtdCggZW51bSBQaXhlbEZvcm1hdCBwaXhfZm10ICkK
K3N0YXRpYyBlbnVtIEFWUGl4ZWxGb3JtYXQgcGlja19waXhfZm10KCBlbnVtIEFWUGl4ZWxGb3Jt
YXQgcGl4X2ZtdCApCiB7CiAJc3dpdGNoICggcGl4X2ZtdCApCiAJewotCWNhc2UgUElYX0ZNVF9B
UkdCOgotCWNhc2UgUElYX0ZNVF9SR0JBOgotCWNhc2UgUElYX0ZNVF9BQkdSOgotCWNhc2UgUElY
X0ZNVF9CR1JBOgotCQlyZXR1cm4gUElYX0ZNVF9SR0JBOworCWNhc2UgQVZfUElYX0ZNVF9BUkdC
OgorCWNhc2UgQVZfUElYX0ZNVF9SR0JBOgorCWNhc2UgQVZfUElYX0ZNVF9BQkdSOgorCWNhc2Ug
QVZfUElYX0ZNVF9CR1JBOgorCQlyZXR1cm4gQVZfUElYX0ZNVF9SR0JBOwogI2lmIGRlZmluZWQo
RkZVRElWKSAmJiAoTElCU1dTQ0FMRV9WRVJTSU9OX0lOVCA+PSAoKDI8PDE2KSsoNTw8OCkrMTAy
KSkKIAljYXNlIEFWX1BJWF9GTVRfQkFZRVJfUkdHQjE2TEU6Ci0JCXJldHVybiBQSVhfRk1UX1JH
QjI0OworCQlyZXR1cm4gQVZfUElYX0ZNVF9SR0IyNDsKICNlbmRpZgogCWRlZmF1bHQ6Ci0JCXJl
dHVybiBQSVhfRk1UX1lVVjQyMlA7CisJCXJldHVybiBBVl9QSVhfRk1UX1lVVjQyMlA7CiAJfQog
fQogCkBAIC05NzYsMjYgKzk3NywyNiBAQCBzdGF0aWMgaW50IHNldF9sdW1hX3RyYW5zZmVyKCBz
dHJ1Y3QgU3dzQ29udGV4dCAqY29udGV4dCwgaW50IHNyY19jb2xvcnNwYWNlLAogCQlicmlnaHRu
ZXNzLCBjb250cmFzdCwgc2F0dXJhdGlvbiApOwogfQogCi1zdGF0aWMgbWx0X2ltYWdlX2Zvcm1h
dCBwaWNrX2ltYWdlX2Zvcm1hdCggZW51bSBQaXhlbEZvcm1hdCBwaXhfZm10ICkKK3N0YXRpYyBt
bHRfaW1hZ2VfZm9ybWF0IHBpY2tfaW1hZ2VfZm9ybWF0KCBlbnVtIEFWUGl4ZWxGb3JtYXQgcGl4
X2ZtdCApCiB7CiAJc3dpdGNoICggcGl4X2ZtdCApCiAJewotCWNhc2UgUElYX0ZNVF9BUkdCOgot
CWNhc2UgUElYX0ZNVF9SR0JBOgotCWNhc2UgUElYX0ZNVF9BQkdSOgotCWNhc2UgUElYX0ZNVF9C
R1JBOgorCWNhc2UgQVZfUElYX0ZNVF9BUkdCOgorCWNhc2UgQVZfUElYX0ZNVF9SR0JBOgorCWNh
c2UgQVZfUElYX0ZNVF9BQkdSOgorCWNhc2UgQVZfUElYX0ZNVF9CR1JBOgogCQlyZXR1cm4gbWx0
X2ltYWdlX3JnYjI0YTsKLQljYXNlIFBJWF9GTVRfWVVWNDIwUDoKLQljYXNlIFBJWF9GTVRfWVVW
SjQyMFA6Ci0JY2FzZSBQSVhfRk1UX1lVVkE0MjBQOgorCWNhc2UgQVZfUElYX0ZNVF9ZVVY0MjBQ
OgorCWNhc2UgQVZfUElYX0ZNVF9ZVVZKNDIwUDoKKwljYXNlIEFWX1BJWF9GTVRfWVVWQTQyMFA6
CiAJCXJldHVybiBtbHRfaW1hZ2VfeXV2NDIwcDsKLQljYXNlIFBJWF9GTVRfUkdCMjQ6Ci0JY2Fz
ZSBQSVhfRk1UX0JHUjI0OgotCWNhc2UgUElYX0ZNVF9HUkFZODoKLQljYXNlIFBJWF9GTVRfTU9O
T1dISVRFOgotCWNhc2UgUElYX0ZNVF9NT05PQkxBQ0s6Ci0JY2FzZSBQSVhfRk1UX1JHQjg6Ci0J
Y2FzZSBQSVhfRk1UX0JHUjg6CisJY2FzZSBBVl9QSVhfRk1UX1JHQjI0OgorCWNhc2UgQVZfUElY
X0ZNVF9CR1IyNDoKKwljYXNlIEFWX1BJWF9GTVRfR1JBWTg6CisJY2FzZSBBVl9QSVhfRk1UX01P
Tk9XSElURToKKwljYXNlIEFWX1BJWF9GTVRfTU9OT0JMQUNLOgorCWNhc2UgQVZfUElYX0ZNVF9S
R0I4OgorCWNhc2UgQVZfUElYX0ZNVF9CR1I4OgogI2lmIGRlZmluZWQoRkZVRElWKSAmJiAoTElC
U1dTQ0FMRV9WRVJTSU9OX0lOVCA+PSAoKDI8PDE2KSsoNTw8OCkrMTAyKSkKIAljYXNlIEFWX1BJ
WF9GTVRfQkFZRVJfUkdHQjE2TEU6CiAJCXJldHVybiBtbHRfaW1hZ2VfcmdiMjQ7CkBAIC0xMDcx
LDIxICsxMDcyLDE0IEBAIHN0YXRpYyBpbnQgY29udmVydF9pbWFnZSggcHJvZHVjZXJfYXZmb3Jt
YXQgc2VsZiwgQVZGcmFtZSAqZnJhbWUsIHVpbnQ4X3QgKmJ1ZmZlCiAJbWx0X3Byb2ZpbGUgcHJv
ZmlsZSA9IG1sdF9zZXJ2aWNlX3Byb2ZpbGUoIE1MVF9QUk9EVUNFUl9TRVJWSUNFKCBzZWxmLT5w
YXJlbnQgKSApOwogCWludCByZXN1bHQgPSBzZWxmLT55dXZfY29sb3JzcGFjZTsKIAotI2lmZGVm
IFVTRV9NTVgKLQlmbGFncyB8PSBTV1NfQ1BVX0NBUFNfTU1YOwotI2VuZGlmCi0jaWZkZWYgVVNF
X1NTRQotCWZsYWdzIHw9IFNXU19DUFVfQ0FQU19NTVgyOwotI2VuZGlmCi0KIAltbHRfbG9nX2Rl
YnVnKCBNTFRfUFJPRFVDRVJfU0VSVklDRShzZWxmLT5wYXJlbnQpLCAiJXMgQCAlZHglZCBzcGFj
ZSAlZC0+JWRcbiIsCiAJCW1sdF9pbWFnZV9mb3JtYXRfbmFtZSggKmZvcm1hdCApLAogCQl3aWR0
aCwgaGVpZ2h0LCBzZWxmLT55dXZfY29sb3JzcGFjZSwgcHJvZmlsZS0+Y29sb3JzcGFjZSApOwog
CiAJLy8gZXh0cmFjdCBhbHBoYSBmcm9tIHBsYW5hciBmb3JtYXRzCi0JaWYgKCAoIHBpeF9mbXQg
PT0gUElYX0ZNVF9ZVVZBNDIwUAorCWlmICggKCBwaXhfZm10ID09IEFWX1BJWF9GTVRfWVVWQTQy
MFAKICNpZiBkZWZpbmVkKEZGVURJVikKLQkJCXx8IHBpeF9mbXQgPT0gUElYX0ZNVF9ZVVZBNDQ0
UAorCQkJfHwgcGl4X2ZtdCA9PSBBVl9QSVhfRk1UX1lVVkE0NDRQCiAjZW5kaWYKIAkJCSkgJiYK
IAkJKmZvcm1hdCAhPSBtbHRfaW1hZ2VfcmdiMjRhICYmICpmb3JtYXQgIT0gbWx0X2ltYWdlX29w
ZW5nbCAmJgpAQCAtMTExMCwxMCArMTEwNCwxMCBAQCBzdGF0aWMgaW50IGNvbnZlcnRfaW1hZ2Uo
IHByb2R1Y2VyX2F2Zm9ybWF0IHNlbGYsIEFWRnJhbWUgKmZyYW1lLCB1aW50OF90ICpidWZmZQog
CQkvLyBhdmZvcm1hdCB3aXRoIG5vIGZpbHRlcnMgYW5kIGV4cGxpY2l0bHkgcmVxdWVzdGVkLgog
I2lmIGRlZmluZWQoRkZVRElWKSAmJiAoTElCQVZGT1JNQVRfVkVSU0lPTl9JTlQgPj0gKCg1NTw8
MTYpKyg0ODw8OCkrMTAwKSkKIAkJc3RydWN0IFN3c0NvbnRleHQgKmNvbnRleHQgPSBzd3NfZ2V0
Q29udGV4dCh3aWR0aCwgaGVpZ2h0LCBzcmNfcGl4X2ZtdCwKLQkJCXdpZHRoLCBoZWlnaHQsIFBJ
WF9GTVRfWVVWNDIwUCwgZmxhZ3MsIE5VTEwsIE5VTEwsIE5VTEwpOworCQkJd2lkdGgsIGhlaWdo
dCwgQVZfUElYX0ZNVF9ZVVY0MjBQLCBmbGFncywgTlVMTCwgTlVMTCwgTlVMTCk7CiAjZWxzZQog
CQlzdHJ1Y3QgU3dzQ29udGV4dCAqY29udGV4dCA9IHN3c19nZXRDb250ZXh0KCB3aWR0aCwgaGVp
Z2h0LCBwaXhfZm10LAotCQkJCQl3aWR0aCwgaGVpZ2h0LCBzZWxmLT5mdWxsX2x1bWEgPyBQSVhf
Rk1UX1lVVko0MjBQIDogUElYX0ZNVF9ZVVY0MjBQLAorCQkJCQl3aWR0aCwgaGVpZ2h0LCBzZWxm
LT5mdWxsX2x1bWEgPyBBVl9QSVhfRk1UX1lVVko0MjBQIDogQVZfUElYX0ZNVF9ZVVY0MjBQLAog
CQkJCQlmbGFncywgTlVMTCwgTlVMTCwgTlVMTCk7CiAjZW5kaWYKIApAQCAtMTEzMyw5ICsxMTI3
LDkgQEAgc3RhdGljIGludCBjb252ZXJ0X2ltYWdlKCBwcm9kdWNlcl9hdmZvcm1hdCBzZWxmLCBB
VkZyYW1lICpmcmFtZSwgdWludDhfdCAqYnVmZmUKIAllbHNlIGlmICggKmZvcm1hdCA9PSBtbHRf
aW1hZ2VfcmdiMjQgKQogCXsKIAkJc3RydWN0IFN3c0NvbnRleHQgKmNvbnRleHQgPSBzd3NfZ2V0
Q29udGV4dCggd2lkdGgsIGhlaWdodCwgc3JjX3BpeF9mbXQsCi0JCQl3aWR0aCwgaGVpZ2h0LCBQ
SVhfRk1UX1JHQjI0LCBmbGFncyB8IFNXU19GVUxMX0NIUl9IX0lOVCwgTlVMTCwgTlVMTCwgTlVM
TCk7CisJCQl3aWR0aCwgaGVpZ2h0LCBBVl9QSVhfRk1UX1JHQjI0LCBmbGFncyB8IFNXU19GVUxM
X0NIUl9IX0lOVCwgTlVMTCwgTlVMTCwgTlVMTCk7CiAJCUFWUGljdHVyZSBvdXRwdXQ7Ci0JCWF2
cGljdHVyZV9maWxsKCAmb3V0cHV0LCBidWZmZXIsIFBJWF9GTVRfUkdCMjQsIHdpZHRoLCBoZWln
aHQgKTsKKwkJYXZwaWN0dXJlX2ZpbGwoICZvdXRwdXQsIGJ1ZmZlciwgQVZfUElYX0ZNVF9SR0Iy
NCwgd2lkdGgsIGhlaWdodCApOwogCQkvLyBsaWJzd3NjYWxlIHdhbnRzIHRoZSBSR0IgY29sb3Jz
cGFjZSB0byBiZSBTV1NfQ1NfREVGQVVMVCwgd2hpY2ggaXMgPSBTV1NfQ1NfSVRVNjAxLgogCQlz
ZXRfbHVtYV90cmFuc2ZlciggY29udGV4dCwgc2VsZi0+eXV2X2NvbG9yc3BhY2UsIDYwMSwgc2Vs
Zi0+ZnVsbF9sdW1hLCAwICk7CiAJCXN3c19zY2FsZSggY29udGV4dCwgKGNvbnN0IHVpbnQ4X3Qq
IGNvbnN0KikgZnJhbWUtPmRhdGEsIGZyYW1lLT5saW5lc2l6ZSwgMCwgaGVpZ2h0LApAQCAtMTE0
NSw5ICsxMTM5LDkgQEAgc3RhdGljIGludCBjb252ZXJ0X2ltYWdlKCBwcm9kdWNlcl9hdmZvcm1h
dCBzZWxmLCBBVkZyYW1lICpmcmFtZSwgdWludDhfdCAqYnVmZmUKIAllbHNlIGlmICggKmZvcm1h
dCA9PSBtbHRfaW1hZ2VfcmdiMjRhIHx8ICpmb3JtYXQgPT0gbWx0X2ltYWdlX29wZW5nbCApCiAJ
ewogCQlzdHJ1Y3QgU3dzQ29udGV4dCAqY29udGV4dCA9IHN3c19nZXRDb250ZXh0KCB3aWR0aCwg
aGVpZ2h0LCBzcmNfcGl4X2ZtdCwKLQkJCXdpZHRoLCBoZWlnaHQsIFBJWF9GTVRfUkdCQSwgZmxh
Z3MgfCBTV1NfRlVMTF9DSFJfSF9JTlQsIE5VTEwsIE5VTEwsIE5VTEwpOworCQkJd2lkdGgsIGhl
aWdodCwgQVZfUElYX0ZNVF9SR0JBLCBmbGFncyB8IFNXU19GVUxMX0NIUl9IX0lOVCwgTlVMTCwg
TlVMTCwgTlVMTCk7CiAJCUFWUGljdHVyZSBvdXRwdXQ7Ci0JCWF2cGljdHVyZV9maWxsKCAmb3V0
cHV0LCBidWZmZXIsIFBJWF9GTVRfUkdCQSwgd2lkdGgsIGhlaWdodCApOworCQlhdnBpY3R1cmVf
ZmlsbCggJm91dHB1dCwgYnVmZmVyLCBBVl9QSVhfRk1UX1JHQkEsIHdpZHRoLCBoZWlnaHQgKTsK
IAkJLy8gbGlic3dzY2FsZSB3YW50cyB0aGUgUkdCIGNvbG9yc3BhY2UgdG8gYmUgU1dTX0NTX0RF
RkFVTFQsIHdoaWNoIGlzID0gU1dTX0NTX0lUVTYwMS4KIAkJc2V0X2x1bWFfdHJhbnNmZXIoIGNv
bnRleHQsIHNlbGYtPnl1dl9jb2xvcnNwYWNlLCA2MDEsIHNlbGYtPmZ1bGxfbHVtYSwgMCApOwog
CQlzd3Nfc2NhbGUoIGNvbnRleHQsIChjb25zdCB1aW50OF90KiBjb25zdCopIGZyYW1lLT5kYXRh
LCBmcmFtZS0+bGluZXNpemUsIDAsIGhlaWdodCwKQEAgLTExNTgsMTMgKzExNTIsMTMgQEAgc3Rh
dGljIGludCBjb252ZXJ0X2ltYWdlKCBwcm9kdWNlcl9hdmZvcm1hdCBzZWxmLCBBVkZyYW1lICpm
cmFtZSwgdWludDhfdCAqYnVmZmUKIAl7CiAjaWYgZGVmaW5lZChGRlVESVYpICYmIChMSUJBVkZP
Uk1BVF9WRVJTSU9OX0lOVCA+PSAoKDU1PDwxNikrKDQ4PDw4KSsxMDApKQogCQlzdHJ1Y3QgU3dz
Q29udGV4dCAqY29udGV4dCA9IHN3c19nZXRDb250ZXh0KCB3aWR0aCwgaGVpZ2h0LCBzcmNfcGl4
X2ZtdCwKLQkJCXdpZHRoLCBoZWlnaHQsIFBJWF9GTVRfWVVZVjQyMiwgZmxhZ3MgfCBTV1NfRlVM
TF9DSFJfSF9JTlAsIE5VTEwsIE5VTEwsIE5VTEwpOworCQkJd2lkdGgsIGhlaWdodCwgQVZfUElY
X0ZNVF9ZVVlWNDIyLCBmbGFncyB8IFNXU19GVUxMX0NIUl9IX0lOUCwgTlVMTCwgTlVMTCwgTlVM
TCk7CiAjZWxzZQogCQlzdHJ1Y3QgU3dzQ29udGV4dCAqY29udGV4dCA9IHN3c19nZXRDb250ZXh0
KCB3aWR0aCwgaGVpZ2h0LCBwaXhfZm10LAotCQkJd2lkdGgsIGhlaWdodCwgUElYX0ZNVF9ZVVlW
NDIyLCBmbGFncyB8IFNXU19GVUxMX0NIUl9IX0lOUCwgTlVMTCwgTlVMTCwgTlVMTCk7CisJCQl3
aWR0aCwgaGVpZ2h0LCBBVl9QSVhfRk1UX1lVWVY0MjIsIGZsYWdzIHwgU1dTX0ZVTExfQ0hSX0hf
SU5QLCBOVUxMLCBOVUxMLCBOVUxMKTsKICNlbmRpZgogCQlBVlBpY3R1cmUgb3V0cHV0OwotCQlh
dnBpY3R1cmVfZmlsbCggJm91dHB1dCwgYnVmZmVyLCBQSVhfRk1UX1lVWVY0MjIsIHdpZHRoLCBo
ZWlnaHQgKTsKKwkJYXZwaWN0dXJlX2ZpbGwoICZvdXRwdXQsIGJ1ZmZlciwgQVZfUElYX0ZNVF9Z
VVlWNDIyLCB3aWR0aCwgaGVpZ2h0ICk7CiAJCWlmICggIXNldF9sdW1hX3RyYW5zZmVyKCBjb250
ZXh0LCBzZWxmLT55dXZfY29sb3JzcGFjZSwgcHJvZmlsZS0+Y29sb3JzcGFjZSwgc2VsZi0+ZnVs
bF9sdW1hLCAwICkgKQogCQkJcmVzdWx0ID0gcHJvZmlsZS0+Y29sb3JzcGFjZTsKIAkJc3dzX3Nj
YWxlKCBjb250ZXh0LCAoY29uc3QgdWludDhfdCogY29uc3QqKSBmcmFtZS0+ZGF0YSwgZnJhbWUt
PmxpbmVzaXplLCAwLCBoZWlnaHQsCkBAIC0xMjk3LDEyICsxMjkxLDExIEBAIHN0YXRpYyBpbnQg
cHJvZHVjZXJfZ2V0X2ltYWdlKCBtbHRfZnJhbWUgZnJhbWUsIHVpbnQ4X3QgKipidWZmZXIsIG1s
dF9pbWFnZV9mb3JtCiAJZG91YmxlIGRlbGF5ID0gbWx0X3Byb3BlcnRpZXNfZ2V0X2RvdWJsZSgg
cHJvcGVydGllcywgInZpZGVvX2RlbGF5IiApOwogCiAJLy8gU2VlayBpZiBuZWNlc3NhcnkKLQlj
b25zdCBjaGFyICppbnRlcnAgPSBtbHRfcHJvcGVydGllc19nZXQoIGZyYW1lX3Byb3BlcnRpZXMs
ICJyZXNjYWxlLmludGVycCIgKTsKLQlpbnQgcHJlc2VlayA9IG11c3RfZGVjb2RlCisJaW50IHBy
ZXNlZWsgPSBtdXN0X2RlY29kZSAmJiBjb2RlY19jb250ZXh0LT5oYXNfYl9mcmFtZXM7CiAjaWYg
ZGVmaW5lZChGRlVESVYpCi0JCSYmICggaW50ZXJwICYmIHN0cmNtcCggaW50ZXJwLCAibmVhcmVz
dCIgKSApCisJY29uc3QgY2hhciAqaW50ZXJwID0gbWx0X3Byb3BlcnRpZXNfZ2V0KCBmcmFtZV9w
cm9wZXJ0aWVzLCAicmVzY2FsZS5pbnRlcnAiICk7CisJcHJlc2VlayA9IHByZXNlZWsgJiYgaW50
ZXJwICYmIHN0cmNtcCggaW50ZXJwLCAibmVhcmVzdCIgKTsKICNlbmRpZgotCQkmJiBjb2RlY19j
b250ZXh0LT5oYXNfYl9mcmFtZXM7CiAJaW50IHBhdXNlZCA9IHNlZWtfdmlkZW8oIHNlbGYsIHBv
c2l0aW9uLCByZXFfcG9zaXRpb24sIHByZXNlZWsgKTsKIAogCS8vIFNlZWsgbWlnaHQgaGF2ZSBy
ZW9wZW5lZCB0aGUgZmlsZQpAQCAtMTMxMCwxMCArMTMwMywxMCBAQCBzdGF0aWMgaW50IHByb2R1
Y2VyX2dldF9pbWFnZSggbWx0X2ZyYW1lIGZyYW1lLCB1aW50OF90ICoqYnVmZmVyLCBtbHRfaW1h
Z2VfZm9ybQogCXN0cmVhbSA9IGNvbnRleHQtPnN0cmVhbXNbIHNlbGYtPnZpZGVvX2luZGV4IF07
CiAJY29kZWNfY29udGV4dCA9IHN0cmVhbS0+Y29kZWM7CiAJaWYgKCAqZm9ybWF0ID09IG1sdF9p
bWFnZV9ub25lIHx8ICpmb3JtYXQgPT0gbWx0X2ltYWdlX2dsc2wgfHwKLQkJCWNvZGVjX2NvbnRl
eHQtPnBpeF9mbXQgPT0gUElYX0ZNVF9BUkdCIHx8Ci0JCQljb2RlY19jb250ZXh0LT5waXhfZm10
ID09IFBJWF9GTVRfUkdCQSB8fAotCQkJY29kZWNfY29udGV4dC0+cGl4X2ZtdCA9PSBQSVhfRk1U
X0FCR1IgfHwKLQkJCWNvZGVjX2NvbnRleHQtPnBpeF9mbXQgPT0gUElYX0ZNVF9CR1JBICkKKwkJ
CWNvZGVjX2NvbnRleHQtPnBpeF9mbXQgPT0gQVZfUElYX0ZNVF9BUkdCIHx8CisJCQljb2RlY19j
b250ZXh0LT5waXhfZm10ID09IEFWX1BJWF9GTVRfUkdCQSB8fAorCQkJY29kZWNfY29udGV4dC0+
cGl4X2ZtdCA9PSBBVl9QSVhfRk1UX0FCR1IgfHwKKwkJCWNvZGVjX2NvbnRleHQtPnBpeF9mbXQg
PT0gQVZfUElYX0ZNVF9CR1JBICkKIAkJKmZvcm1hdCA9IHBpY2tfaW1hZ2VfZm9ybWF0KCBjb2Rl
Y19jb250ZXh0LT5waXhfZm10ICk7CiAjaWYgZGVmaW5lZChGRlVESVYpICYmIChMSUJTV1NDQUxF
X1ZFUlNJT05fSU5UID49ICgoMjw8MTYpKyg1PDw4KSsxMDIpKQogCWVsc2UgaWYgKCBjb2RlY19j
b250ZXh0LT5waXhfZm10ID09IEFWX1BJWF9GTVRfQkFZRVJfUkdHQjE2TEUgKSB7CkBAIC0xMzQ2
LDcgKzEzMzksNyBAQCBzdGF0aWMgaW50IHByb2R1Y2VyX2dldF9pbWFnZSggbWx0X2ZyYW1lIGZy
YW1lLCB1aW50OF90ICoqYnVmZmVyLCBtbHRfaW1hZ2VfZm9ybQogCQkJCXBpY3R1cmUubGluZXNp
emVbMV0gPSBjb2RlY19jb250ZXh0LT53aWR0aCAvIDI7CiAJCQkJcGljdHVyZS5saW5lc2l6ZVsy
XSA9IGNvZGVjX2NvbnRleHQtPndpZHRoIC8gMjsKIAkJCQl5dXZfY29sb3JzcGFjZSA9IGNvbnZl
cnRfaW1hZ2UoIHNlbGYsIChBVkZyYW1lKikgJnBpY3R1cmUsICpidWZmZXIsCi0JCQkJCVBJWF9G
TVRfWVVWNDIwUCwgZm9ybWF0LCAqd2lkdGgsICpoZWlnaHQsICZhbHBoYSApOworCQkJCQlBVl9Q
SVhfRk1UX1lVVjQyMFAsIGZvcm1hdCwgKndpZHRoLCAqaGVpZ2h0LCAmYWxwaGEgKTsKIAkJCX0K
IAkJCWVsc2UKICNlbmRpZgpAQCAtMTUzOSw3ICsxNTMyLDcgQEAgc3RhdGljIGludCBwcm9kdWNl
cl9nZXRfaW1hZ2UoIG1sdF9mcmFtZSBmcmFtZSwgdWludDhfdCAqKmJ1ZmZlciwgbWx0X2ltYWdl
X2Zvcm0KIAkJCQkJCQlWZHBTdGF0dXMgc3RhdHVzID0gdmRwX3N1cmZhY2VfZ2V0X2JpdHMoIHJl
bmRlci0+c3VyZmFjZSwgZGVzdF9mb3JtYXQsIHBsYW5lcywgcGl0Y2hlcyApOwogCQkJCQkJCWlm
ICggc3RhdHVzID09IFZEUF9TVEFUVVNfT0sgKQogCQkJCQkJCXsKLQkJCQkJCQkJeXV2X2NvbG9y
c3BhY2UgPSBjb252ZXJ0X2ltYWdlKCBzZWxmLCBzZWxmLT52aWRlb19mcmFtZSwgKmJ1ZmZlciwg
UElYX0ZNVF9ZVVY0MjBQLAorCQkJCQkJCQl5dXZfY29sb3JzcGFjZSA9IGNvbnZlcnRfaW1hZ2Uo
IHNlbGYsIHNlbGYtPnZpZGVvX2ZyYW1lLCAqYnVmZmVyLCBBVl9QSVhfRk1UX1lVVjQyMFAsCiAJ
CQkJCQkJCQlmb3JtYXQsICp3aWR0aCwgKmhlaWdodCwgJmFscGhhICk7CiAJCQkJCQkJCW1sdF9w
cm9wZXJ0aWVzX3NldF9pbnQoIGZyYW1lX3Byb3BlcnRpZXMsICJjb2xvcnNwYWNlIiwgeXV2X2Nv
bG9yc3BhY2UgKTsKIAkJCQkJCQl9CmRpZmYgLS1naXQgYS9zcmMvbW9kdWxlcy9hdmZvcm1hdC92
ZHBhdS5jIGIvc3JjL21vZHVsZXMvYXZmb3JtYXQvdmRwYXUuYwppbmRleCA3MTlkYjFjLi40ZjJl
NmI5IDEwMDY0NAotLS0gYS9zcmMvbW9kdWxlcy9hdmZvcm1hdC92ZHBhdS5jCisrKyBiL3NyYy9t
b2R1bGVzL2F2Zm9ybWF0L3ZkcGF1LmMKQEAgLTEzNiw5ICsxMzYsOSBAQCBzdGF0aWMgaW50IHZk
cGF1X2luaXQoIHByb2R1Y2VyX2F2Zm9ybWF0IHNlbGYgKQogCXJldHVybiBzdWNjZXNzOwogfQog
Ci1zdGF0aWMgZW51bSBQaXhlbEZvcm1hdCB2ZHBhdV9nZXRfZm9ybWF0KCBzdHJ1Y3QgQVZDb2Rl
Y0NvbnRleHQgKnMsIGNvbnN0IGVudW0gUGl4ZWxGb3JtYXQgKmZtdCApCitzdGF0aWMgZW51bSBB
VlBpeGVsRm9ybWF0IHZkcGF1X2dldF9mb3JtYXQoIHN0cnVjdCBBVkNvZGVjQ29udGV4dCAqcywg
Y29uc3QgZW51bSBBVlBpeGVsRm9ybWF0ICpmbXQgKQogewotCXJldHVybiBQSVhfRk1UX1ZEUEFV
X0gyNjQ7CisJcmV0dXJuIEFWX1BJWF9GTVRfVkRQQVVfSDI2NDsKIH0KIAogc3RhdGljIGludCB2
ZHBhdV9nZXRfYnVmZmVyKCBBVkNvZGVjQ29udGV4dCAqY29kZWNfY29udGV4dCwgQVZGcmFtZSAq
ZnJhbWUgKQpAQCAtMjQwLDcgKzI0MCw3IEBAIHN0YXRpYyBpbnQgdmRwYXVfZGVjb2Rlcl9pbml0
KCBwcm9kdWNlcl9hdmZvcm1hdCBzZWxmICkKIAlzZWxmLT52aWRlb19jb2RlYy0+cmVsZWFzZV9i
dWZmZXIgPSB2ZHBhdV9yZWxlYXNlX2J1ZmZlcjsKIAlzZWxmLT52aWRlb19jb2RlYy0+ZHJhd19o
b3Jpel9iYW5kID0gdmRwYXVfZHJhd19ob3JpejsKIAlzZWxmLT52aWRlb19jb2RlYy0+c2xpY2Vf
ZmxhZ3MgPSBTTElDRV9GTEFHX0NPREVEX09SREVSIHwgU0xJQ0VfRkxBR19BTExPV19GSUVMRDsK
LQlzZWxmLT52aWRlb19jb2RlYy0+cGl4X2ZtdCA9IFBJWF9GTVRfVkRQQVVfSDI2NDsKKwlzZWxm
LT52aWRlb19jb2RlYy0+cGl4X2ZtdCA9IEFWX1BJWF9GTVRfVkRQQVVfSDI2NDsKIAkKIAlWZHBE
ZWNvZGVyUHJvZmlsZSBwcm9maWxlID0gVkRQX0RFQ09ERVJfUFJPRklMRV9IMjY0X0hJR0g7CiAJ
dWludDMyX3QgbWF4X3JlZmVyZW5jZXMgPSBzZWxmLT52aWRlb19jb2RlYy0+cmVmczsK
" | base64 -d > $TMP/ffmpeg3.patch
patch -p1 -i $TMP/ffmpeg3.patch || exit 1
fi

# Autodetect which SWIG Languages bindings to build
# according to what's installed on the system:
if [ -f "$(which lua)" ]; then lua="lua"; else lua=""; fi
if [ -f "$(which perl)" ]; then perl="perl"; else perl=""; fi
if [ -f "$(which php)" ]; then php="php"; else php=""; fi
if [ -f "$(which python)" ]; then python="python"; else python=""; fi
if [ -h "$(which tclsh)" ]; then tcl="tcl"; else tcl=""; fi
# ruby-2.2 gives issues... probably more recent mlt versions will fix this
ruby="" #if [ -f "$(which ruby)" ]; then ruby="ruby"; else ruby=""; fi

CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --disable-debug \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --qimage-libdir=${QT4DIR}/qt/lib \
  --qimage-includedir=${QT4DIR}/qt/include \
  --enable-gpl \
  --luma-compress \
  --enable-motion-est \
  --avformat-swscale \
  --swig-languages="$java $lua $perl $php $python $ruby $tcl $csharp" \
  --build=$ARCH-slackware-linux

echo 
echo "$VERDE"Compilando ..."$CIERRE"
sleep 1

make clean
CFLAGS="$SLKCFLAGS" CXXFLAGS="$SLKCFLAGS" make
make install DESTDIR=$PKG

# Install built bindings
if [ "$lua" ]; then
  ( cd $TMP/$PRGNAM-$VERSION/src/swig/lua
    install -D -m 0755 mlt.so $PKG/$(pkg-config --variable INSTALL_CMOD lua)/mlt.so
    install -D -m 0644 play.lua $PKG/usr/doc/$PRGNAM-$VERSION/play.lua
  )
fi
if [ "$perl" ]; then
  ( cd $TMP/$PRGNAM-$VERSION/src/swig/perl
    install -D -m 0644 mlt.pm $PKG/usr/share/perl5/mlt.pm
    install -D -m 0755 play.pl $PKG/usr/share/perl5/play.pl
    install -D -m 0755 blib/arch/auto/mlt/mlt.so \
      $PKG/usr/lib$LIBDIRSUFFIX/perl5/auto/mlt/mlt.so
    install -D -m 0644 mlt.bs \
      $PKG/usr/lib$LIBDIRSUFFIX/perl5/auto/mlt/mlt.bs
  )
fi
if [ "$php" ]; then
  ( cd $TMP/$PRGNAM-$VERSION/src/swig/php
    install -D -m 0755 mlt.so $PKG/usr/lib$LIBDIRSUFFIX/php/extensions/mlt.so
    install -D -m 0644 play.php $PKG/usr/doc/$PRGNAM-$VERSION/play.php
  )
fi
if [ "$python" ]; then
  PYTHONSITEPKG=$(python -c "import sys, os; print os.path.join('/usr/lib${LIBDIRSUFFIX}', 'python%s' % sys.version[:3], 'site-packages')")
  ( cd $TMP/$PRGNAM-$VERSION/src/swig/python
    install -D -m 0755 _mlt.so $PKG/$PYTHONSITEPKG/_mlt.so
    install -D -m 0755 mlt.py $PKG/$PYTHONSITEPKG/mlt.py
    install -D -m 0755 play.py $PKG/usr/doc/$PRGNAM-$VERSION/play.py
  )
fi
if [ "$ruby" ]; then
  ( cd $TMP/$PRGNAM-$VERSION/src/swig/ruby
    install -D -m 0755 mlt.so \
      $PKG$(ruby -e 'print RbConfig::CONFIG["sitearchdir"]')/mlt.so
    install -D -m 0755 play.rb $PKG/usr/doc/$PRGNAM-$VERSION/play.rb
    install -D -m 0755 thumbs.rb $PKG/usr/doc/$PRGNAM-$VERSION/thumbs.rb
  )
fi
if [ "$tcl" ]; then
  ( cd $TMP/$PRGNAM-$VERSION/src/swig/tcl
    . /usr/lib$LIBDIRSUFFIX/tclConfig.sh
    install -D -m 0755 mlt.so \
      $PKG/usr/lib$LIBDIRSUFFIX/tcl$TCL_MAJOR_VERSION/$TCL_VERSION/mlt.so
    install -D -m 0755 play.tcl $PKG/usr/doc/$PRGNAM-$VERSION/play.tcl
  )
fi
}

###################################
## BLOQUE PRINCIPAL DE EJECUCION ##
###################################
# Si se cierra el script inesperadamente, ejecutar la funcion de limpieza
trap f_exitmode SIGHUP SIGINT

#Inicializamos las variables globales
f_variables
#Comprobamos conexion a Internet
f_comprobarConexion
#Inicializamos las variables del script
F_variables
#Creamos directorio de trabajo
f_directorioTemporal
#Mostramos el mensaje de presentacion
f_presentacion
#Comprobamos updates del script
f_comprobarUpdates
#Asignamos o detectamos arquitectura
f_arquitectura
#Comprobamos version instalada del paquete
f_versionInstalada
#Compronar dependencias
F_dependencias
#Si no existe el fichero se descargara
f_download
#Preparamos entorno
f_preparar
#Descomprimir fichero descargado y compilamos
F_compilar
#Hacemos strip sobre el paquete
f_strip
#Creamos xzm , instalamos y salimos
f_tareasFinales