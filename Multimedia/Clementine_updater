#!/bin/sh

# Script by www.seguridadwireless.net

SCRIPT_VERSION=20150930
CATEGORIA="Reproductores multimedia"

############################################################
## Funciones comunes. Su nombre empieza por f_ ##
############################################################
f_variables(){
	. /opt/wifislax-updaters/Funciones/funciones_updater
}

############################################################
## Funciones propias del script. Su nombre empieza por F_ ##
############################################################
# Definicion de variables
F_variables() {
	WEB=https://www.clementine-player.org/es/downloads
	VERSION=`curl -s $WEB | grep Clementine | grep .tar.gz | cut -d "/" -f 7 | cut -d "." -f-3`
	PRGNAM=Clementine
	echo -ne "\033]2;${PRGNAM}_updater\007"
	DESCARGA=https://github.com/clementine-player/$PRGNAM/archive/$VERSION.tar.gz
	if [ $VERSION = 1.2.3 ]; then
	WEB=http://ponce.cc/slackware/sources/repo/
	VERSION=20150512_70cc291
	PRGNAM=clementine
	echo -ne "\033]2;${PRGNAM}_updater\007"
	DESCARGA=http://ponce.cc/slackware/sources/repo/$PRGNAM-$VERSION.tar.xz
	fi
	
}

# Comprobar dependencias
F_dependencias(){
	if [ -f /usr/include/libspotify/api.h ]; then
		SPOTIFY_EXIST=`echo "$VERDE"Instalada"$CIERRE"`
		SPOTIFY_EXIST2=SI
	else
		SPOTIFY_EXIST=`echo "$ROJO"No Instalada"$CIERRE"`
		SPOTIFY_EXIST2=NO
	fi
	
	if [ -f /usr/lib/libechonest.so ]; then
		LIBECHONEST_EXIST=`echo "$VERDE"Instalada"$CIERRE"`
		LIBECHONEST_EXIST2=SI
	else
		LIBECHONEST_EXIST=`echo "$ROJO"No Instalada"$CIERRE"`
		LIBECHONEST_EXIST2=NO
	fi
	
	echo "$ROSA"Comprobando dependencias ..."$CIERRE"
	echo
	sleep 3
	echo "$CYAN"Dependencias de este paquete:""
	echo ""
	echo "$AMARILLO"libspotify"$CIERRE: $SPOTIFY_EXIST"
	
		if [ $SPOTIFY_EXIST2 = NO ]; then
		echo "$AMARILLO"
		echo "Resolviendo dependencia libspotify ..."
		sleep 3
		if [ ! -f /opt/wifislax-updaters/Librerias/libspotify_updater ]; then
			echo $ROJO
			echo "No tienes el updater libspotify..."
			sleep 1
			echo "No se puede continuar..."
			sleep 1
			echo "El script se cierra aqui."
			sleep 1
			echo $CIERRE
			exit 0
		fi
		cd /opt/wifislax-updaters/Librerias/
		statusfile=$(mktemp)
		xterm -e sh -c '/opt/wifislax-updaters/Librerias/libspotify_updater; echo $? > '$statusfile 
		status=$(cat $statusfile)
		rm $statusfile
		if [ -z $status ] || [ $status != "0" ]; then
		  echo "$ROJO"ERROR. No se ha podido crear el paquete"$CIERRE"
		  if [ -z $status ]; then
		    exit 1
		  else
		    exit $status
		  fi
		fi
		
		cd $TMP
	fi

	# Verificamos que salio bien libspotify_updater
	if [ ! -f /usr/include/libspotify/api.h ]; then
		echo $ROJO
		echo "Algo salio mal al instalar libspotify..."
		sleep 1
		echo "No se puede continuar..."
		sleep 1
		echo "El script se cierra aqui."
		sleep 1
		echo $CIERRE
		exit 0
	fi
	
		if [ $LIBECHONEST_EXIST2 = NO ]; then
		echo "$AMARILLO"
		echo "Resolviendo dependencia libechonest ..."
		sleep 3
		if [ ! -f /opt/wifislax-updaters/Librerias/libechonest_updater ]; then
			echo $ROJO
			echo "No tienes el updater libechonest..."
			sleep 1
			echo "No se puede continuar..."
			sleep 1
			echo "El script se cierra aqui."
			sleep 1
			echo $CIERRE
			exit 0
		fi
		cd /opt/wifislax-updaters/Librerias/
		statusfile=$(mktemp)
		xterm -e sh -c '/opt/wifislax-updaters/Librerias/libechonest_updater; echo $? > '$statusfile 
		status=$(cat $statusfile)
		rm $statusfile
		if [ -z $status ] || [ $status != "0" ]; then
		  echo "$ROJO"ERROR. No se ha podido crear el paquete"$CIERRE"
		  if [ -z $status ]; then
		    exit 1
		  else
		    exit $status
		  fi
		fi
		
		cd $TMP
	fi

	# Verificamos que salio bien libechonest_updater
	if [ ! -f /usr/lib/libechonest.so ]; then
		echo $ROJO
		echo "Algo salio mal al instalar libechonest..."
		sleep 1
		echo "No se puede continuar..."
		sleep 1
		echo "El script se cierra aqui."
		sleep 1
		echo $CIERRE
		exit 0
	fi

}

# Si el paquete no existe se descargara de internet
F_download(){
        if [ $VERSION = 1.2.3 ]; then
        EXT=tar.gz 
        else
        EXT=tar.xz
        fi
	if [ ! -f $PRGNAM-$VERSION.$EXT ]; then
	echo ""
	echo "$CYAN"Descargando sources de $PRGNAM-$VERSION"$CIERRE"
	sleep 3
	aria2c -x 3 $DESCARGA
	fi
}

# Descomprimimos el fichero descargado y compilamos
F_compilar(){
echo ""
echo "$VERDE"Descomprimiendo ..."$CIERRE"
sleep 3
rm -rf $PRGNAM-$VERSION
tar xvf $PRGNAM-$VERSION.$EXT
cd $PRGNAM-$VERSION

# Generamos y aplicamos parche
if [ $VERSION = "1.2.3" ]; then
cat > clementine.patch << "EOF"
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 1104542..65d765c 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -887,7 +887,6 @@ if(HAVE_DBUS)
   # Hack to get it to generate interfaces without namespaces - required
   # because otherwise org::freedesktop::UDisks and
   # org::freedesktop::UDisks::Device conflict.
-  list(APPEND QT_DBUSXML2CPP_EXECUTABLE -N)
 
   # MPRIS DBUS interfaces
   qt4_add_dbus_adaptor(SOURCES
@@ -954,6 +953,8 @@ if(HAVE_DBUS)
   list(APPEND HEADERS ${CMAKE_CURRENT_BINARY_DIR}/dbus/avahientrygroup.h)
   list(APPEND SOURCES ${CMAKE_CURRENT_BINARY_DIR}/dbus/avahientrygroup.cpp)
 
+  set_source_files_properties( dbus/org.freedesktop.UDisks.xml dbus/org.freedesktop.UDisks.Device.xml PROPERTIES NO_NAMESPACE TRUE)
+
   # DeviceKit DBUS interfaces
   if(HAVE_DEVICEKIT)
     qt4_add_dbus_interface(SOURCES

EOF

patch -p1 -i clementine.patch

fi

chown -R root:root .
find -L . \
 \( -perm 777 -o -perm 775 -o -perm 750 -o -perm 711 -o -perm 555 \
  -o -perm 511 \) -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 640 -o -perm 600 -o -perm 444 \
 -o -perm 440 -o -perm 400 \) -exec chmod 644 {} \;
 
  
# Compilamos paquete
echo ""
echo "$VERDE"Compilando ..."$CIERRE"
sleep 3

mkdir build
cd build
  cmake \
	-DCMAKE_C_FLAGS:STRING="$SLKCFLAGS" \
	-DCMAKE_CXX_FLAGS:STRING="$SLKCFLAGS" \
	-DCMAKE_INSTALL_PREFIX=/usr \
	-DLIB_SUFFIX=${LIBDIRSUFFIX} \
	-DMAN_INSTALL_DIR=/usr/man \
	-DCMAKE_BUILD_TYPE=Release \
	..
  make all CFLAGS="-fPIC" PMFLAGS="-DNEWBUFFER"  || exit 1
  make install DESTDIR=$PKG
cd ..
}

###################################
## BLOQUE PRINCIPAL DE EJECUCION ##
###################################
# Si se cierra el script inesperadamente, ejecutar la funcion de limpieza
trap f_exitmode SIGHUP SIGINT

#Inicializamos las variables globales
f_variables
#Comprobamos conexion a Internet
f_comprobarConexion
#Inicializamos las variables del script
F_variables
#Creamos directorio de trabajo
f_directorioTemporal
#Mostramos el mensaje de presentacion
f_presentacion
#Comprobamos updates del script
f_comprobarUpdates
#Compronar dependencias
F_dependencias
#Asignamos o detectamos arquitectura
f_arquitectura
#Comprobamos version instalada del script
f_versionInstalada
#Si no existe el fichero se descargara
F_download
#Descomprimir fichero descargado y compilamos
F_compilar
#Hacemos strip sobre el paquete
f_strip
#Creamos xzm , instalamos y salimos
f_tareasFinales
