#!/bin/sh

# Script by www.seguridadwireless.net

SCRIPT_VERSION=20151008
CATEGORIA="Editores de video"

############################################################
## Funciones comunes. Su nombre empieza por f_ ##
############################################################
f_variables(){
	. /opt/wifislax-updaters/Funciones/funciones_updater
}

############################################################
## Funciones propias del script. Su nombre empieza por F_ ##
############################################################
# Definicion de variables
F_variables() {
	PRGNAM=aegisub
	echo -ne "\033]2;${PRGNAM}_updater\007"
	WEB=http://ftp.aegisub.org/pub/archives/releases/source/
	VERSION=`curl -s $WEB | grep .xz | tail -1 | cut -d- -f2 | cut -d t -f1 | sed "s/.$//g"`
	RAMA=`echo $VERSION | cut -d . -f-2`
	EXTENSION=tar.xz
	SOURCES=$PRGNAM-$VERSION.$EXTENSION
	DOWNLOAD=http://ftp.aegisub.org/pub/archives/releases/source/$SOURCES
}

F_dependencias(){
	if [ -f /usr/bin/ffmsindex ]; then
		FFMS2_EXIST=`echo "$VERDE"Instalada"$CIERRE"`
		FFMS2_EXIST2=SI
	else
		FFMS2_EXIST=`echo "$ROJO"No Instalada"$CIERRE"`
		FFMS2_EXIST2=NO
	fi

	echo "$ROSA"Comprobando dependencias ..."$CIERRE"
	echo
	sleep 3
	echo "$CYAN"Dependencias de este paquete:""
	echo ""
	echo "$AMARILLO"ffms2"$CIERRE: $FFMS2_EXIST"
	
	if [ $FFMS2_EXIST2 = NO ]; then
		echo "$AMARILLO"
		echo "Resolviendo dependencia ffms2 ..."
		sleep 3
		if [ ! -f /opt/wifislax-updaters/Librerias/ffms2_updater ]; then
			echo $ROJO
			echo "No tienes el updater ffms2..."
			sleep 1
			echo "No se puede continuar..."
			sleep 1
			echo "El script se cierra aqui."
			sleep 1
			echo $CIERRE
			exit 0
		fi
		cd /opt/wifislax-updaters/Librerias/
		statusfile=$(mktemp)
		xterm -e sh -c '/opt/wifislax-updaters/Librerias/ffms2_updater; echo $? > '$statusfile 
		status=$(cat $statusfile)
		rm $statusfile
		if [ -z $status ] || [ $status != "0" ]; then
		  echo "$ROJO"ERROR. No se ha podido crear el paquete"$CIERRE"
		  if [ -z $status ]; then
		    exit 1
		  else
		    exit $status
		  fi
		fi
		
		cd $TMP
	fi

	# Verificamos que salio bien ffms2_updater
	if [ ! -f /usr/bin/ffmsindex ]; then
		echo $ROJO
		echo "Algo salio mal al instalar ffms2..."
		sleep 1
		echo "No se puede continuar..."
		sleep 1
		echo "El script se cierra aqui."
		sleep 1
		echo $CIERRE
		exit 0
	fi

	# Si todo salio bien
	echo ""
	echo "$VERDE"Bien ..podemos continuar"$CIERRE"
	echo ""
	sleep 3
}

# Descomprimimos el fichero descargado y compilamos
F_compilar(){
sed 's/$(LIBS_BOOST) $(LIBS_ICU)/$(LIBS_BOOST) $(LIBS_ICU) -pthread/' -i tools/Makefile  

LDFLAGS="$LDFLAGS -lz" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --without-{portaudio,openal,oss} \
  --disable-update-checker \
  --build=$ARCH-slackware-linux

make  || exit 1
make install DESTDIR=$PKG

ln -s $PRGNAM-$RAMA $PKG/usr/bin/$PRGNAM

rm -f $PKG/usr/bin/aegisub
(
 cd $PKG/usr/bin
 ln -s aegisub-$RAMA aegisub
)
}

###################################
## BLOQUE PRINCIPAL DE EJECUCION ##
###################################
# Si se cierra el script inesperadamente, ejecutar la funcion de limpieza
trap f_exitmode SIGHUP SIGINT

#Inicializamos las variables globales
f_variables
#Comprobamos conexion a Internet
f_comprobarConexion
#Inicializamos las variables del script
F_variables
#Creamos directorio de trabajo
f_directorioTemporal
#Mostramos el mensaje de presentacion
f_presentacion
#Comprobamos updates del script
f_comprobarUpdates
# Comprobar dependencias
F_dependencias
#Asignamos o detectamos arquitectura
f_arquitectura
#Comprobamos version instalada del paquete
f_versionInstalada
#Si no existe el fichero se descargara
f_download
#Preparar entorno
f_preparar
#Descomprimir fichero descargado y compilamos
F_compilar
#Hacemos strip sobre el paquete
f_strip
#Creamos xzm , instalamos y salimos
f_tareasFinales
