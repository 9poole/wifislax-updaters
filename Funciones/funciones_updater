#!/bin/bash

# Script by www.seguridadwireless.net

FUNCIONES_VERSION=20150922

# Colores
CIERRE=${CIERRE:-"[0m"}
ROJO=${ROJO:-"[1;31m"}
VERDE=${VERDE:-"[1;32m"}
CYAN=${CYAN:-"[1;36m"}
AMARILLO=${AMARILLO:-"[1;33m"}
BLANCO=${BLANCO:-"[1;37m"}
ROSA=${ROSA:-"[1;35m"}

# Variables globales
PRGNAM=funciones
VERSION=$FUNCIONES_VERSION
WEB=http://www.downloadwireless.net
DOWNLOAD=$WEB/wifislax-updaters/Funciones/${PRGNAM}_updater
BUILD=${BUILD:-1}
TAG=${TAG:-sw}
CWD=$(pwd)

# Vamos a liberar toda la memoria cache
sync && echo 3 > /proc/sys/vm/drop_caches

# Eliminamos posibles ficheros viejos de modificaciones de scripts	
rm -rf /opt/wifislax-updaters/*/*~ &>/dev/null

# Funcion que limpia
f_exitmode() {
   rm -Rf $TMP &>/dev/null
   exit 1
}

# Funcion que muestra Presentacion
f_presentacion() {
clear
	sleep 0.1 | echo ""
	sleep 0.1 | echo ""
	sleep 0.1 | echo "$BLANCO"  "       ******************************"   
	sleep 0.1 | echo "$VERDE"   "          Actualizador/Instalador    "   
	sleep 0.1 | echo "$VERDE"   "          Paquete: "$AMARILLO"$PRGNAM"                                                 
	sleep 0.1 | echo "$VERDE"   "                                   "
	sleep 0.1 | echo "$VERDE"   "          www.seguridadwireless.net  "
	sleep 0.1 | echo "$BLANCO"  "       ******************************"
	sleep 0.1 | echo "$CERRAR"
sleep 1
}

# Comprobar conexion by geminis_demon
f_comprobarConexion() {
   if [ ! "$(ping google.com -c1 2>/dev/null)" ]; then
      echo "No tengo internet ... el script se cerrara."
      echo ""
      sleep 1
      exit 0
   fi
}

# Comprobacion de updates para el script
f_comprobarUpdates() {
   SERVIDOR_WEB="https://raw.githubusercontent.com/wifislax-ng/wifislax-updaters/master"
   DIRECTORIO=$(find /opt/wifislax-updaters -type f -name ${PRGNAM}_updater| rev | cut -d/ -f2- | rev)
   SERVIDOR_VERSION=$(timeout -s SIGTERM 10 curl -sk $SERVIDOR_WEB/${DIRECTORIO##*/}/${PRGNAM}_updater | grep "SCRIPT_VERSION=" | head -1 |cut -d "=" -f2)

   echo ${CYAN}Version Script$CIERRE: $ROJO${SCRIPT_VERSION:6}$BLANCO/$AMARILLO${SCRIPT_VERSION:4:2}$BLANCO/$ROJO${SCRIPT_VERSION:0:4}$CIERRE

   if [ "$(ping github.com -c1 2>/dev/null)" ]; then
      if [[ $SCRIPT_VERSION -lt $SERVIDOR_VERSION ]]; then
         echo
         echo "$ROSA"Comprobando si hay actualizaciones para el script..."$CIERRE."
         echo ${ROJO}NUEVA VERSION$CIERRE
         echo
         echo ${ROSA}Version Server$CIERRE: $ROJO${SERVIDOR_VERSION:6}$BLANCO/$AMARILLO${SERVIDOR_VERSION:4:2}$BLANCO/$ROJO${SERVIDOR_VERSION:0:4}$CIERRE
         echo
         echo ${CYAN}Actualizando ${PRGNAM}_updater
         curl -sk $SERVIDOR_WEB/${DIRECTORIO##*/}/${PRGNAM}_updater -o $DIRECTORIO/${PRGNAM}_updater
         echo ${ROJO}LISTO$CIERRE
         sleep 1
         $0
         exit
      fi
   fi
}

# Definimos arquitectura del sistema. Se le pasa la arquitectura como parametro o la calcula automaticamente si no se indica nada
f_arquitectura() {
   ARCH=$1
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) ARCH=i586 ;;
    arm*) ARCH=arm ;;
       *) ARCH=$( uname -m ) ;;
  esac
fi

if [ "$ARCH" = "i586" ]; then
  SLKCFLAGS="-O2 -march=i586 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX="64"
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

set -e
}

# Detecta la version instalada en el sistema
f_versionInstalada() {
  INSTALADA=""
  POSIBLES_INSTALADAS=$(find /var/log/packages -iname "${PRGNAM}-[0-9]*" | head -1)
   if [ -f $POSIBLES_INSTALADAS ] && [ $POSIBLES_INSTALADAS ]; then
      INSTALADA="$(ls /var/log/packages/$PRGNAM-[0-9]*-* 2>/dev/null|cut -d '/' -f5-|sed "s/^${PRGNAM}-//"|rev|cut -d'-' -f3-|rev|tail -1)"
      echo ""
      echo ""$AMARILLO"La version del sistema es..."$CYAN"$PRGNAM-$INSTALADA"$CIERRE""
      sleep 1
      echo ""
      echo "__________________________________________"
      echo ""
      echo ""$AMARILLO"La version mas nueva en su pagina web es..."$CYAN"$PRGNAM-$VERSION"$CIERRE""
      echo ""
      echo ""$BLANCO"Pulsa $ROJO"ENTER" $BLANCO"si deseas actualizarla""
      read junk
      echo ""
   fi
   
# Si el paquete esta instalado y es el mismo se sube el numero de build
if [ ! -z $INSTALADA ] && [ $INSTALADA = $VERSION ]; then
BUILDLOCAL="$(ls /var/log/packages/$PRGNAM-[0-9]*-* 2>/dev/null|cut -d '/' -f5-|sed "s/^${PRGNAM}-//" | rev | cut -d- -f1 | grep -o [0-9] | head -1)"
BUILD=`expr $BUILDLOCAL + 1`
fi

}

# Elimina una version anterior
f_eliminaVersion() {
   sleep 1
   if [ $PRGNAM = xampp ]; then
   if [ -f /opt/lampp/lampp ]; then
   /opt/lampp/lampp stop
   fi
   fi
   if [ $PRGNAM = metasploit ]; then
   if [ -f /etc/rc.d/rc.metasploit ]; then
   /etc/rc.d/rc.metasploit stop
   fi
   fi

   for x in `find /var/log/packages -iname "${PRGNAM}-[0-9]*"`; do
   echo ""
   echo "$ROJO"Eliminando la version del sistema..."$CIERRE"
   sleep 2
   removepkg /var/log/packages/$x
   done

}

# Crea el directorio temporal de trabajo
f_directorioTemporal() {
   TMP=${TMP:-/tmp/build/$PRGNAM}
   PKG=$TMP/package-$PRGNAM
   OUTPUT=${OUTPUT:-/tmp}
   rm -rf $PKG
   mkdir -p $TMP $PKG $OUTPUT
   cd $TMP
}

# Hace strip al paquete
f_strip() {
   cd $PKG
   stripdir $PKG 2>/dev/null
}

# Creamos xzm , instalamos y salimos
f_tareasFinales() {
   # Si el sistema tiene una version anterior se eliminara
   if [ -f $(grep -r -l -o $PRGNAM- /var/log/packages/ | head -1) ]; then
      f_eliminaVersion
   fi
   echo ""
   echo "$VERDE"Instalando y creando modulo xzm ..."$CIERRE"
   # Liberamos memoria
   sync && echo 3 > /proc/sys/vm/drop_caches
# Guardamos los modulos en carpetas por categoria
   cd ..
   CATEGORIA=`echo $CWD | cut -d "/" -f4`
   if [ ! -d $HOME/Desktop/$CATEGORIA ]; then
   mkdir -p $HOME/Desktop/$CATEGORIA
   fi

#Para sigram nos basamos en el log. Para el resto siempre es igual
if [ $PRGNAM = sigram ]; then
	cleandir $PKG &>/dev/null
	log2xzm $TMP/sigram.log $HOME/Desktop/$CATEGORIA/$PRGNAM-${VERSION}-$ARCH-$BUILD$TAG.xzm
	xzm2dir $HOME/Desktop/$CATEGORIA/$PRGNAM-${VERSION}-$ARCH-$BUILD$TAG.xzm /
else
	cleandir $PKG &>/dev/null
	dir2xzm $PKG $HOME/Desktop/$CATEGORIA/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.xzm
	xzm2dir $HOME/Desktop/$CATEGORIA/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.xzm /
   fi
# Iniciar algun servicio si existe
   if [ -f $PKG/etc/rc.d/rc.teamviewerd ]; then
   /etc/rc.d/rc.teamviewerd start &>/dev/null
   fi
# Variables especiales para renombrar algunos modulos
   if [ $PRGNAM = jre ]; then
   mv $HOME/Desktop/$CATEGORIA/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.xzm $HOME/Desktop/$CATEGORIA/008-Extra_$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.xzm
   fi
   if [ $PRGNAM = "google-chrome" ]; then
   mv $HOME/Desktop/$CATEGORIA/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.xzm $HOME/Desktop/$CATEGORIA/007-Extra_$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.xzm
   fi
   if [ $PRGNAM = firmwares ]; then
   mv $HOME/Desktop/$CATEGORIA/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.xzm $HOME/Desktop/$CATEGORIA/010-Extra_$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.xzm
   fi

   rm -Rf $TMP &>/dev/null
   clear
   echo ""
   echo ""$VERDE"Creado modulo del paquete "$AMARILLO"$PRGNAM-$VERSION"$CIERRE""
   echo ""
   echo "$VERDE"Las tareas han finalizado"$CIERRE"
   
   if [ $PRGNAM = metasploit ]; then
       /etc/rc.d/rc.metasploit start &> /dev/null
   fi
   if [ $PRGNAM = pulseaudio ]; then
       pulseaudio --start >/dev/null 2>&1
   fi
   if [ -x /usr/bin/update-desktop-database ]; then
       /usr/bin/update-desktop-database -q /usr/share/applications >/dev/null 2>&1
   fi
   
   if [ -x /usr/bin/update-mime-database ]; then
       /usr/bin/update-mime-database /usr/share/mime >/dev/null 2>&1
   fi
   
   if [ -e usr/share/icons/hicolor/icon-theme.cache ]; then
   if [ -x /usr/bin/gtk-update-icon-cache ]; then
       /usr/bin/gtk-update-icon-cache /usr/share/icons/hicolor >/dev/null 2>&1
   fi
   fi
   
   if [ -x /usr/bin/glib-compile-schemas ]; then
       /usr/bin/glib-compile-schemas /usr/share/glib-2.0/schemas >/dev/null 2>&1
   fi
   
   # Update the X font indexes:
   if [ -x /usr/bin/mkfontdir ]; then
   ( cd /usr/share/fonts/TTF
    mkfontscale . >/dev/null 2>&1
    mkfontdir . >/dev/null 2>&1
   )
   fi

   if [ -x /usr/bin/fc-cache ]; then
   /usr/bin/fc-cache -f >/dev/null 2>&1
   fi
   
   sleep 1
   echo ""
   echo "$VERDE"Bye Bye"$CIERRE"
   echo ""
   sleep 1
# Liberamos memoria
   sync && echo 3 > /proc/sys/vm/drop_caches
# Salimos del script
   exit 0
} 
